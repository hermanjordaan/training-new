Sequential Erlang
=================
:revealjs_theme: esl
:revealjs_slideNumber: true
:revealjs_history: true
:revealjs_transition: linear
:revealjs_center: false
Erlang Solutions Ltd.
© 1999–2015 Erlang Solutions Ltd.

++++
<link rel="stylesheet" type="text/css" href="../../styles/svg.css"></link>
<script type="text/javascript" src="../../tools/snap.svg/snap.svg-min.js"></script>
++++


Overview: *sequential Erlang I*
-------------------------------
* Sequential Erlang I
** Conditional Evaluation
** Guards
** Recursion
* Sequential Erlang II
* Sequential Erlang III


Conditional Evaluation: *case*
------------------------------
++++
<svg id="conditional_evaluation_case_1" style="height:600px; width:1000px;">
<style type="text/css">
  #conditional_evaluation_case_1 .line {stroke: #860404;}
</style>
<script>

var s1 = Snap("#conditional_evaluation_case_1");

var arrow = s1.polygon([0,0, 4,2, 0,4]).attr({"fill":"#000"}).transform('r0').addClass("darkred");
var marker = arrow.marker(0,0, 4,4, 3,2);

s1.text(300,200,"case").addClass("code bold");
s1.text(300,200,"     lists:member(foo, List) of").addClass("code");
s1.text(300,200,"                             of").addClass("code bold");
s1.text(300,245,"    true -> ok;").addClass("code");
s1.text(300,290,"    false -> {error, unknown}").addClass("code");
s1.text(300,335,"end").addClass("code bold");

var s1_g1_1 = s1.text(400,50,"expression").addClass("darkred");
var s1_g1_2 = s1.path("M480,60 l35,110").attr({"marker-end":marker}).addClass("line");

var s1_g2_1 = s1.text(40,230,"case").addClass("darkred");
var s1_g2_2 = s1.text(20,265,"clauses").addClass("darkred");
var s1_g2_3 = s1.path("M135,235 l190,0").attr({"marker-end":marker}).addClass("line");
var s1_g2_4 = s1.path("M135,235 l190,42").attr({"marker-end":marker}).addClass("line");

var s1_g3_1 = s1.text(880,120,"clause").addClass("darkred");
var s1_g3_2 = s1.text(860,155,"separator").addClass("darkred");
var s1_g3_3 = s1.circle(553,238,15).addClass("line darkred");
var s1_g3_4 = s1.path("M920,170 Q900,250 574,238").attr({"marker-end":marker}).addClass("line");

var s1_g4_1 = s1.text(802,360,"no separator").addClass("darkred");
var s1_g4_2 = s1.text(800,395,"in last clause").addClass("darkred");
var s1_g4_3 = s1.circle(823,280,15).addClass("line darkred");
var s1_g4_4 = s1.path("M885,335 l-46,-42").attr({"marker-end":marker}).addClass("line");

var s1_g5_1 = s1.text(350,450,"patterns").addClass("darkred");
var s1_g5_2 = s1.ellipse(414,258,65,54).addClass("line darkred");
var s1_g5_3 = s1.path("M400,420 l12,-103").attr({"marker-end":marker}).addClass("line");

var s1_g6_1 = s1.text(550,430,"clause body").addClass("darkred");
var s1_g6_2 = s1.rect(520,257,293,45,12).addClass("line darkred").attr({"stroke-dasharray":"8,6"});
var s1_g6_3 = s1.path("M640,400 l30,-93").attr({"marker-end":marker}).addClass("line");

var s1_g1 = s1.g(s1_g1_1, s1_g1_2).addClass("hide");
var s1_g2 = s1.g(s1_g2_1, s1_g2_2, s1_g2_3, s1_g2_4).addClass("hide");
var s1_g3 = s1.g(s1_g3_1, s1_g3_2, s1_g3_3, s1_g3_4).addClass("hide");
var s1_g4 = s1.g(s1_g4_1, s1_g4_2, s1_g4_3, s1_g4_4).addClass("hide");
var s1_g5 = s1.g(s1_g5_1, s1_g5_2, s1_g5_3).addClass("hide");
var s1_g6 = s1.g(s1_g6_1, s1_g6_2, s1_g6_3).addClass("hide");

var s1_counter=1
s1.click( function() {
  switch(s1_counter) {
    case 1: {s1_g1.animate({"opacity":"1"}, 250, mina.linear); s1_counter++; break};
    case 2: {s1_g2.animate({"opacity":"1"}, 250, mina.linear); s1_g1.animate({"opacity":"0"}, 250, mina.linear); s1_counter++; break};
    case 3: {s1_g3.animate({"opacity":"1"}, 250, mina.linear); s1_g2.animate({"opacity":"0"}, 250, mina.linear); s1_counter++; break};
    case 4: {s1_g4.animate({"opacity":"1"}, 250, mina.linear); s1_g3.animate({"opacity":"0"}, 250, mina.linear); s1_counter++; break};
    case 5: {s1_g5.animate({"opacity":"1"}, 250, mina.linear); s1_g4.animate({"opacity":"0"}, 250, mina.linear); s1_counter++; break};
    case 6: {s1_g6.animate({"opacity":"1"}, 250, mina.linear); s1_g5.animate({"opacity":"0"}, 250, mina.linear); s1_counter++; break};
    case 7: {s1_g6.animate({"opacity":"0"}, 250, mina.linear); s1_counter++; break};
    }
} );

</script>
</svg>
++++

[NOTE.speaker]
--
Mention that the case clause consists of the reserved words case of & end.
--


Conditional Evaluation: *case*
------------------------------
++++
<div class="left">
<div class="pre"><b>case</b> &lt;expression&gt; <b>of</b>
    Pattern1 ->
        &lt;expression 1&gt;,
        &lt;expression 2&gt;,
        ...
        &lt;expression N&gt;;
   Pattern2 -&gt;
        &lt;expression 1&gt;,
        &lt;expression 2&gt;,
        ...
        &lt;expression N&gt;;
   _ -&gt;
        &lt;expression 1&gt;,
        ...
        &lt;expression N&gt;
<b>end</b>
</div></div>
++++

[role="right"]
* One branch should always succeed
* Using an unbound variable or \'_' ensures that the clause will always match
* The _ clause is not mandatory
* An exception is raised if no clause matches
* Returns the value of the last executed expression

Defensive Programming
---------------------
++++
<div class="left">
<div class="pre">convert(Day) ->
  case Day of
      monday    -> 1;
      tuesday   -> 2;
      wednesday -> 3;
      thursday  -> 4;
      friday    -> 5;
      saturday  -> 6;
      sunday    -> 7;
      <b>Other ->
         {error, unknown_day}</b>
  end.
</div></div>
++++

[role="right"]
* Defensive programming: program in the convert function for the error case or ...
* ... let it fail here by deleting the *Other* clause.
* This will raise an exception
* The caller will have to handle the error that they have caused.

Guards
------
++++
<div class="left">
<div class="pre">factorial(N) <b>when</b> N > 0 ->
    N * factorial(N - 1);
factorial(0) -> 1.


 <strong>This is <b>NOT</b> the same as...</strong>

factorial(0) -> 1;
factorial(N) ->
    N * factorial(N - 1).
</div></div>
++++

[role="right"]
* The reserved word *when* introduces a guard
* Fully guarded clauses can be re-ordered
* Guards can be used in function heads, case clauses, receive and if expressions.


Guards: *examples*
------------------
....
number(Num) when is_integer(Num) -> integer;
number(Num) when is_float(Num) -> float;
number(_Other) -> false.
....

[role="closer"]
* is_number(X), is_integer(X), is_float(X)
** X is a number
* is_atom(X), is_pid(X), is_tuple(X), is_list(X)
** X is the specified datatype
* length(List) == Int, tuple_size(Tuple) == Size, X > Y + Z
** Some BIFs and mathematical applications can be applied in guards
* X == Y        X /= Y        X =:= Y        X =/= Y
** X is (not) equal to Y, X is exactly (not) equal to Y  (1==1.0 ✓, 1=:=1.0 ×)
* X =< Y        X >= Y
** NB, not \<= or \=>


Guards
------
....
valid_age(Age) when Age >= 18, Age =< 99 ->
    true;
valid_age(_) ->
    false.
 
 
 
....

* All variables in guards have to be bound
* Guards have to be free of side effects
* If all the guards have to succeed, use , to separate them
* If one guard has to succeed, use ; to separate them
* There are restrictions on BIFs and expressions in guards
** See the Erlang reference manual for complete details

Conditional Evaluation: *if*
----------------------------

++++
<svg id="conditional_evaluation_if_1" style="height:550px; width:900px;">
<style type="text/css">
  #conditional_evaluation_if_1 .line {stroke: #860404;}
</style>
<script>

var s2 = Snap("#conditional_evaluation_if_1");

var arrow = s2.polygon([0,0, 4,2, 0,4]).attr({"fill":"#000"}).transform('r0').addClass("darkred");
var marker = arrow.marker(0,0, 4,4, 3,2);

s2.text(300,200,"if").addClass("code bold");
s2.text(300,245,"   X < 1  -> smaller;").addClass("code");
s2.text(300,290,"   X > 1  -> greater;").addClass("code");
s2.text(300,335,"   X == 1 -> equal").addClass("code");
s2.text(300,380,"end").addClass("code bold");

var s2_g1_1 = s2.text(40,287,"if clauses").addClass("darkred");
var s2_g1_2 = s2.path("M184,280 l158,0").attr({"marker-end":marker}).addClass("line");
var s2_g1_3 = s2.path("M184,280 l158,-45").attr({"marker-end":marker}).addClass("line");
var s2_g1_4 = s2.path("M184,280 l158,45").attr({"marker-end":marker}).addClass("line");

var s2_g2_1 = s2.text(740,100,"clause").addClass("darkred");
var s2_g2_2 = s2.text(720,135,"separator").addClass("darkred");
var s2_g2_3 = s2.circle(658,238,15).addClass("line darkred");
var s2_g2_4 = s2.circle(658,283,15).addClass("line darkred");
var s2_g2_5 = s2.path("M760,150 l-86,76").attr({"marker-end":marker}).addClass("line");
var s2_g2_6 = s2.path("M760,150 l-86,121").attr({"marker-end":marker}).addClass("line");

var s2_g3_1 = s2.text(622,430,"no separator").addClass("darkred");
var s2_g3_2 = s2.text(620,465,"in last clause").addClass("darkred");
var s2_g3_3 = s2.circle(632,328,15).addClass("line darkred");
var s2_g3_4 = s2.path("M705,400 l-58,-58").attr({"marker-end":marker}).addClass("line");

var s2_g4_1 = s2.text(190,515,"guard expressions").addClass("darkred");
var s2_g4_2 = s2.rect(340,212,128,134,12).addClass("line darkred").attr({"stroke-dasharray":"8,6"});
var s2_g4_3 = s2.path("M310,490 l80,-140").attr({"marker-end":marker}).addClass("line");

var s2_g5_1 = s2.text(390,450,"clause body").addClass("darkred");
var s2_g5_2 = s2.rect(520,305,105,42,12).addClass("line darkred").attr({"stroke-dasharray":"8,6"});
var s2_g5_3 = s2.path("M475,420 l60,-68").attr({"marker-end":marker}).addClass("line");

var s2_g1 = s2.g(s2_g1_1, s2_g1_2, s2_g1_3, s2_g1_4).addClass("hide");
var s2_g2 = s2.g(s2_g2_1, s2_g2_2, s2_g2_3, s2_g2_4, s2_g2_5, s2_g2_6).addClass("hide");
var s2_g3 = s2.g(s2_g3_1, s2_g3_2, s2_g3_3, s2_g3_4).addClass("hide");
var s2_g4 = s2.g(s2_g4_1, s2_g4_2, s2_g4_3).addClass("hide");
var s2_g5 = s2.g(s2_g5_1, s2_g5_2, s2_g5_3).addClass("hide");

var s2_counter=1
s2.click( function() {
  switch(s2_counter) {
    case 1: {s2_g1.animate({"opacity":"1"}, 250, mina.linear); s2_counter++; break};
    case 2: {s2_g2.animate({"opacity":"1"}, 250, mina.linear); s2_g1.animate({"opacity":"0"}, 250, mina.linear); s2_counter++; break};
    case 3: {s2_g3.animate({"opacity":"1"}, 250, mina.linear); s2_g2.animate({"opacity":"0"}, 250, mina.linear); s2_counter++; break};
    case 4: {s2_g4.animate({"opacity":"1"}, 250, mina.linear); s2_g3.animate({"opacity":"0"}, 250, mina.linear); s2_counter++; break};
    case 5: {s2_g5.animate({"opacity":"1"}, 250, mina.linear); s2_g4.animate({"opacity":"0"}, 250, mina.linear); s2_counter++; break};
    case 6: {s2_g5.animate({"opacity":"0"}, 250, mina.linear); s2_counter++; break};
    }
} );

</script>
</svg>
++++


Conditional Evaluation: *if*
----------------------------

++++
<div class="left">
<div class="pre"><b>if</b> Guard1 ->
        &lt;expression 1&gt;,
        &lt;expression 2&gt;,
        ...
        &lt;expression N&gt;;
   Guard2 -&gt;
        &lt;expression 1&gt;,
        &lt;expression 2&gt;,
        ...
        &lt;expression N&gt;;
   ...
   true -&gt;
        &lt;expression 1&gt;,
        ...
        &lt;expression N&gt;
<b>end</b>
</div></div>
++++

[role="right"]
* One branch must always succeed
* By using *true* as the last guard, we ensure that a clause will always succeed
* The *true* guard is not mandatory
* An exception is raised if no clause succeeds
* Returns the value of the last executed expression


General Switch
--------------

++++
<div class="pre">if <b>f(Args)</b> -> ok;
   true    -> error
end<div style="color:red; font-family:'Lucida Grande'; font-weight:bold; font-size:2em; position:absolute; left:500px; top:15px;">×</div>
case <b>f(Args)</b> of
    true -> ok;
    false -> error
end<div style="color:green; font-family:'Lucida Grande'; font-size:2em; position:absolute; left:500px; top:150px;">✓</div>
</div>
++++


* The if construct fails because it involves a user-defined function, which are forbidden in guards
* The case construct succeeds because it accepts user-defined functions.

Recursion: *traversing lists*
-----------------------------

[role="left"]
....
average(X) -> sum(X) / len(X).

sum([H|T]) -> H + sum(T);
sum([]) -> 0.

len([_|T]) -> 1 + len(T);
len([]) -> 0.
  
....

[role="right"]
* Note the pattern of recursion is the same in both cases
* Taking a list and evaluating an element is a very common pattern

Recursion: *self-describing code*
---------------------------------

[role="left"]
....
sum([]) -> 0;

sum([H|T]) -> H + sum(T).
 
 
 
 
 
....

[role="right"]
* You can read the programs as an executable description:
* "The sum of an empty list is 0."
* "The sum of a non-empty list is the head of the list added to the sum of the tail"


Recursion: *traversing lists*
-----------------------------

[role="left"]
....
printAll([]) ->
    io:format("~n", []);

printAll([X|Xs]) ->
    io:format("~p ", [X]),
    printAll(Xs).
 
 
 
 
....

[role="right"]
* Here we're traversing the list imperatively:
* "If there are no more elements to process, stop"
* "If there are further elements, process the head, and then call the function recursively on the tail."


Recursion: *traversing lists*
-----------------------------

[role="left w_600"]
....
printAll(Ys) ->
    case Ys of
      [] ->
        io:format("~n", []);
      [X|Xs] ->
        io:format("~p ", [X]),
        printAll(Xs)
    end.
 
....


[role="right"]
* Same function again: shows the loop clearly. The call to printAll(Xs) is like a jump back to the top of the loop.
* This is a tail recursive function: the only recursive calls come at the end of the bodies of the clauses.


Recursion: *more patterns*
--------------------------

[role="left w_600"]
....
double([H|T])-> [2*H|double(T)];
double([]) -> [].

member(H, [H|_]) -> true;
member(H, [_|T]) -> member(H,T);
member(_, [])    -> false.

even([H|T]) when H rem 2 == 0 ->
    [H|even(T)];
even([_|T]) ->
    even(T);
even([]) ->
    [].
 
....

[role="right"]
* double/1 maps elements in a list and returns a new list
* member/2 is a predicate looking for an element in a list
* even/1 filters a list of integers and returns the subset of even numbers
* The function member/2 is the only one which is tail recursive


[NOTE.speaker]
If the class is good, explain tail recursion. Else, don’t worry. It will only confuse them. 
A function is said to be tail recursive if the last thing the function does is call itself recursively. 
The last things double and even do is create a new list. (Even, only if the element is event)


Recursion: *accumulators*
-------------------------

[role="left w_600"]
....
average(X) -> average(X, 0, 0).

average([H|T], Length, Sum) ->
  average(T, Length+1, Sum+H);
average([], Length, Sum) ->
  Sum/Length.
 
 
 
 
 
....

[role="right"]
* Only traverses the list once.
* Executes in constant space (tail recursive)
* *Length* and *Sum* play the role of accumulators
* *average([])* is not defined
* Evaluating *average([])* would cause a run time error.

[NOTE.speaker]
Let the students solve this with pen and paper.
Mention that Length and Sum take the role of imperative variables.  
Tell the students to ALWAYS use pen and paper to write recursive functions. 
When solving this problem, stress how the lists and accumulators change in every iteration.


Summary: *sequential Erlang I*
------------------------------
* Sequential Erlang I
** Conditional evaluation
** Guards
** Recursion
* Sequential Erlang II
* Sequential Erlang III


Overview: *sequential Erlang II*
--------------------------------
* Sequential Erlang I
* Sequential Erlang II
** BIFs
** Libraries
** Manual Pages
** The Debugger
* Sequential Erlang III


Built-in Functions
------------------

[role="left"]
....
date()

time()

length(List)

size(Tuple)

atom_to_list(Atom)

list_to_tuple(List)

integer_to_list(2235)

tuple_to_list(Tuple)
 
....

[role="right"]
* Do what you cannot do (or is difficult to do) in Erlang
* Mostly written in C for fast execution
* BIFs are by convention regarded as being in the *erlang* module.


Built-in Functions
------------------
* There are BIFs for:
** Process and port handling
** Object access and examination
** Meta programming
** Type conversion
** System information
** Distribution
** Others
* For a complete list, see the manual page for the erlang module.


Built-in Functions
------------------

[role="left"]
image::images/bifs.png["Use BIFs with care", 500, auto]

[role="right"]
* Built-in functions can modify the real time properties of the system
* A process executing a BIF will not be suspended until the BIF has completed executing
* Other processes will thus not be allowed to execute on the same scheduler
* Use BIFs with care!


Built-in Functions: *examples*
------------------------------
....
1> date().
{2010,9,25}
2> atom_to_list(abcd).
"abcd"
3> tuple_to_list(list_to_tuple([1,2,3,4])).
[1,2,3,4]
4> length([1,2,3,4,5]).
5
 
 
 
....


Built-in Functions: *meta calls*
--------------------------------

[role="centered redcode"]
....
apply(Module, Function, Arguments)
M:function(Arg1, ...)
M:F(Arg1, ...)
....

* *apply/3* is a BIF used to dynamically evaluate functions
* The function must be exported
* The arguments can possibly be an empty list
* All the arguments can be established at runtime
* Extremely powerful when implementing generic code


Built-in Functions: *meta calls*
--------------------------------

++++
<div class="pre">
<svg id="built_in_functions_meta_calls_1" style="height:500px; width:1010px;">
<style type="text/css">
  #built_in_functions_meta_calls_1 .line {stroke: #860404;}
</style>
<script>

var s3 = Snap("#built_in_functions_meta_calls_1");

var arrow = s3.polygon([0,0, 4,2, 0,4]).attr({"fill":"#000"}).transform('r0').addClass("darkred");
var marker = arrow.marker(0,0, 4,4, 3,2);

s3.text(10,40,"1> Module = io.").addClass("code bold");
s3.text(10,80,"io").addClass("code");
s3.text(10,110,"2> Function = format.").addClass("code bold");
s3.text(10,160,"format").addClass("code");
s3.text(10,200,"3> Arguments = [\"Hello World \", []].").addClass("code bold");
s3.text(10,240,"[\"Hello World \",[]]").addClass("code");
s3.text(10,280,"4> apply(Module, Function, Arguments).").addClass("code bold");
s3.text(10,320,"Hello World ok").addClass("code");
s3.text(10,360,"5> io:Function(\"Hello World \", []).").addClass("code bold");
s3.text(10,400,"Hello World ok").addClass("code");
s3.text(10,440,"6> Module:Function(\"Hello World \", []).").addClass("code bold");
s3.text(10,480,"Hello World ok").addClass("code");

s3.text(650,30,"The arguments to").addClass("darkred");
s3.text(655,65,"apply").addClass("darkred bold");
s3.text(748,65,"could have").addClass("darkred");
s3.text(670,100,"been evaluated").addClass("darkred");
s3.text(670,136,"during runtime").addClass("darkred");

s3.path("M640,60 l-130,105").attr({"marker-end":marker}).addClass("line");

s3.text(740,360,"The arities of the").addClass("darkred");
s3.text(745,395,"M:func(Arg1, ...)").addClass("darkred bold");
s3.text(740,430,"and").addClass("darkred");
s3.text(802,431,"M:F(Arg1, ...)").addClass("darkred bold");
s3.text(750,465,"forms are static").addClass("darkred");

s3.path("M730,405 l-95,-35").attr({"marker-end":marker}).addClass("line");
s3.path("M730,405 l-45,16").attr({"marker-end":marker}).addClass("line");

</script>
</svg>
</pre>
++++


Libraries
---------
*io.erl*::
generalised input/output functionality

*file.erl*::
generalised interface towards the file system

*lists.erl*::
standard list processing functions

*code.erl*::
functionality to load, test and manipulate code.

*math.erl*::
mathematical functions


Libraries
---------
* Erlang has a set of libraries where functionality useful to the software designer has been placed
* The previous list of modules are all part of the standard Erlang/OTP distribution
* Many more libraries and modules are available:
** They are referenced in the official documentation


Libraries
---------
....
lists:append(List1, List2) -> NewList.
lists:delete(Element, List) -> NewList.
lists:last(List) -> Element.
lists:reverse(List) -> ReversedList.
lists:sort(List) -> SortedList.
lists:keysort(Pos, TupleList) -> SortedList.
lists:keydelete(Key, Pos, TupleList) -> NewList.
lists:keysearch(Key, Pos, TupleList) ->
    false | {value, Tuple}
....

* The lists module is the most used and one of the most useful ones


Manual Pages
------------
*In the UNIX shell*::
$ erl -man Module

*In HTML*::
By accessing \file://$ERL_ROOT/doc/index.html

*In Emacs*::
Picking one of the entries under the Erlang menu

*In General*::
Manual pages for all the modules can be read online, from the shell, in emacs or in the OTP reference manual.

Take a look at the available modules to get an idea of the existing functionality


The Debugger
------------
* The Erlang debugger is a graphical tool providing mechanisms to debug code and influence program execution
** Allows the user to insert break points
** Step through the code
** Inspect and manipulate variables
** Inspecting the recursive stack


The Debugger
------------

image::images/debugger_1.png[Debugger, 660, auto]

++++
<div style="margin-top:-150px; margin-left:800px;">
<svg id="debugger_1" style="height:240px; width:240px;">
<style type="text/css">
  #debugger_1 .text {fill:#fff; font-size:20pt;}
</style>
<script>

var s4 = Snap("#debugger_1");

s4.polyline([75,10, 165,10, 230,75, 230,165, 165,230, 75,230, 10,165, 10,75, 75,10]).addClass("darkred shape");
s4.text(35,90,"The Windows").addClass("text");
s4.text(55,120,"version is").addClass("text");
s4.text(38,150,"known to be").addClass("text");
s4.text(62,180,"unstable").addClass("text");

</script>
</svg></div>
++++

* debugger:start()


The Debugger
------------

image::images/debugger_2.png[Debugger, 480, auto]

* Interpret the code
** Must be compiled with the *debug_info* flag
** use *c(Module, [debug_info])*


The Debugger
------------

[role="left"]
image::images/debugger_3.png[Debugger, 450, auto]

[role="right"]
* Stepping through the code


Summary: *sequential Erlang II*
-------------------------------
* Sequential Erlang I
* Sequential Erlang II
** BIFs
** Libraries
** Manual Pages
** The Debugger
* Sequential Erlang III


Overview: *sequential Erlang III*
---------------------------------
* Sequential Erlang I
* Sequential Erlang II
* Sequential Erlang III
** Run Time Errors
** Try ... catch
** Throw
** Catch


Run Time Errors: *match*
------------------------
[role="left"]
....
factorial(N) when N > 0 ->
    N * factorial(N - 1);
factorial(0) -> 1.
 
 
 
 
....

[role="right"]
* *function_clause* is returned when none of the existing function patterns matches

++++
<div class="pre" style="clear:both;"><b>1> math:factorial(-1).</b>
** exception error: no function clause matching
  math:factorial(-1)




</div>
++++


Run Time Errors: *match*
------------------------
[role="left"]
....
test(N) ->
    case N of
        -1 -> false;
         1 -> true
    end.
 
 
....

[role="right"]
* *case_clause* is returned when none of the existing patterns in the case statement matches

++++
<div class="pre" style="clear:both;"><b>1> test:test(0).</b>
** exception error: no case clause matching 0
     in function  test:test/1




</div>
++++


Run Time Errors
---------------
[role="left"]
....
test(N) ->
    if 
       N < 0 -> false;
       N > 0 -> true
    end.
 
 
....

[role="right"]
* *if_clause* is returned when none of the existing expressions in the if statement evaluates to *true*

++++
<div class="pre" style="clear:both;"><b>1> test:test(0).</b>
** exception error: no true branch found when evaluating an if expression
     in function  test:test/1



</div>
++++


Run Time Errors: *match*
------------------------

++++
<div class="pre"><b>1> Tuple = {1, two, 3}.</b>
{1,two,3}
<b>2> {1, two, 3, Four} = Tuple.</b>
** exception error: no match of right hand side value
  {1,two,3}

</div>
++++

* *badmatch* errors occur in situations when pattern matching fails and there are no other alternative clauses to choose from.


Run Time Errors: *others*
-------------------------

++++
<div class="pre"><b>1> length(helloWorld).</b>
** exception error: bad argument in function length/1
        called as length(helloWorld)



</div>
++++

* *badarg* is returned when a BIF with wrong arguments is called.


Run Time Errors: *others*
-------------------------

++++
<div class="pre"><b>1> test:hello().</b>
  ** exception error: undefined function test:hello/0




</div>
++++

* *undef* will be returned if the global function being called is not defined or exported


Run Time Errors: *others*
-------------------------

++++
<div class="pre"><b>1> 1 + a.</b>
** exception error: bad argument in an arithmetic expression
     in operator  +/2
        called as 1 + a


</div>
++++

* *badarith* is returned when arithmetical operations are executed with values that are neither integers or floats.

Try ... catch
-------------

++++
<div class="left" style="width:600px;">
<div class="pre"><b>try</b> Expressions <b>of</b>
  Pattern1 ->
     ExpressionBody1;
  Pattern2 ->
     ExpressionBody2
<b>catch</b>
  <i>[Class1:]</i>ExceptionPattern1 ->
     ExceptionBody1;
  <i>[Class2:]</i>ExceptionPattern2 ->
     ExceptionBody2
<b>end</b>


</div></div>
++++

[role="right"]
* *try ... catch* provides a mechanism for monitoring the evaluation of an expression
* It will trap exits caused by expected run time errors
* The patterns *Class1:* and *Class2:* can define the type of exception handled
* The *ExceptionPatterns* can restrict the reason why an exception is raised.

[NOTE.speaker]
<b>of ...</b> is optional if no pattern matching on success return value is required


Try ... catch
-------------

++++
<div class="left">
<div class="pre">1> self().
<0.53.0>
2> X = 2, X = 3.
** exception error: no match of right hand side value 3
3> self().
<0.57.0>
4> <b>try</b> (X = 3) <b>of</b>
4>   Val -> {normal, Val}
4> <b>catch</b>
4>   _:_ -> 43
4> <b>end</b>.
43
5> self().
<0.57.0>

</div></div>
++++

[role="right"]
* \_:_ allows to match on all errors no matter what they are.
* The error is caught and the process doesn't crash


Try ... catch
-------------

++++
<div class="left">
<div class="pre">1> X = 2.
2
2> <b>try</b> (X = 3) <b>of</b>
2>   Val -> {normal, Val}
2> <b>catch</b>
2>   error:Error -> {error, Error}
2> <b>end</b>.
{error,{badmatch,3}}

3> </span>try</span> (X = 3) <b>of</b>
3>   Val -> {normal, Val}
3> <b>catch</b>
3>   error:{badmatch,_} -> 42 
3> <b>end</b>.
42

</div></div>
++++

[role="right"]
* The *error:Error* pattern allows to bind the error reason to a variable and match on it
* *error:{badmatch,_}* allows to match only errors caused by erroneous pattern matching


Throw
-----

++++
<div class="left">
<div class="pre">
<svg id="throw_1" style="height:400px; width:435px; margin-left:20px; margin-top:10px;">
<style type="text/css">
  #throw_1 .text {fill:#fff; font-size:17pt;}
</style>
<script>

var s5 = Snap("#throw_1");

s5.text(50,50,"throw(&lt;expression&gt;)").addClass("code darkred bold")

s5.polyline([170,100, 265,100, 335,170, 335,265, 265,335, 170,335, 100,265, 100,170, 170,100]).addClass("shape").attr({"fill":"red"});
s5.text(153,163,"WARNING!!").addClass("text").attr({"font-size":"19pt"});
s5.text(128,192,"use with care as").addClass("text");
s5.text(118,221,"it makes the code").addClass("text");
s5.text(139,250,"hard to debug").addClass("text");
s5.text(130,279,"and understand").addClass("text");

</script>
</svg>
</div></div>
++++

[role="right"]
* *throw* is used for non-local returns in deep recursive function calls.
* The execution flow jumps to the first *catch* in the execution stack
* Useful for handling exceptions in deeply nested code when you do not want to handle possible errors.

Throw
-----

++++
<div class="pre">add(X, Y) ->    test(Y),
   test(X),
   X + Y.
test(X) when is_integer(X) -> ok;
test(X) -> <b>throw</b>({error, {non_integer, X}}<b>)</b>.
</div>

<div class="pre">1> math:add(1, one).
** exception throw: {error,{non_integer,one}}
2> <b>try</b> math:add(1, one) <b>of</b>
2>   _ -> ok
2> </span>catch</span>
2>   Class:Reason -> {Class, Reason}
2> <b>end</b>.
{throw,{error,{non_integer,one}}}

</div>
++++

Try ... catch: *examples*
-------------------------
++++
<div class="pre">-module(exception).
-export([try_wildcard/1]).

try_wildcard(X) when is_integer(X) ->
  <b>try</b> return_error(X)
  <b>catch</b>
    throw:Throw -> {throw, Throw};
    error:_     -> error;
    Type:Error  -> {Type, Error};
    _           -> other;        %% Will never be returned
    _:_         -> other         %% Will never be returned 
  <b>end</b>.


</div>
++++


Try ... catch: *examples*
-------------------------
++++
<div class="pre">return_error(X) when X < 0 ->
  <b>throw</b>({'EXIT',{badarith,[{exception,return_error,1},
                           {erl_eval,do_apply,5},
                           {shell,exprs,6},
                           {shell,eval_exprs,6},
                           {shell,eval_loop,3}]}});
return_error(X) when X == 0 -> 1/X;
return_error(X) when X > 0 ->
  {'EXIT',{badarith,[{exception,return_error,1},
                     {erl_eval,do_apply,5},
                     {shell,exprs,6},
                     {shell,eval_exprs,6},
                     {shell,eval_loop,3}]}}.

</div>
++++


Try ... catch: *examples*
-------------------------
++++
<div class="pre"><b>1> exception:try_wildcard(-1).</b>
{throw,{'EXIT',{badarith,[{exception,return_error,1},
                          {erl_eval,do_apply,5},
                          {shell,exprs,6},
                          {shell,eval_exprs,6},
                          {shell,eval_loop,3}]}}}
<b>2> exception:try_wildcard(0).</b>
error
<b>3> exception:try_wildcard(1).</b>
{'EXIT',{badarith,[{exception,return_error,1},
                   {erl_eval,do_apply,5},
                   ...
                   {shell,eval_loop,3}]}}

</div>
++++


Catch
-----

[role="centered redcode"]
....
catch <expression>
....

* *catch* provides a mechanism for monitoring the evaluation of an expression
* It will trap exits caused by runtime errors
* A function call resulting in a run time error called in the scope or a catch will return the tuple *{'EXIT', Reason}*
* *Reason* is the runtime error which occurred


Catch
-----
++++
<div class="pre"><b>1> self().</b>
<0.28.0>
<b>2> catch list_to_integer("one").</b>
{'EXIT',{badarg,[{erlang,list_to_integer,["one"]},
             ...,{shell,eval_loop,3}]}}
<b>3> self().</b>
<0.28.0>
<b>4> list_to_integer("one").</b>
** exception error: bad argument
     in function  list_to_integer/1
        called as list_to_integer("one")
<b>5> self().</b>
<0.33.0>

</div>
++++


Catch
-----
++++
<div class="pre"><b>1> catch 1/0.</b>
{'EXIT',{badarith,[{erlang,'/',[1,0]},
                   {erl_eval,do_apply,5},
                   {erl_eval,expr,5},
                   ...,
                   {shell,eval_loop,3}]}}
<b>2> X = catch 1/0.</b>
* 1: syntax error before: 'catch'
<b>2> X = (catch 1/0).</b>
{'EXIT',{badarith,[{erlang,'/',[1,0]},
                   {erl_eval,do_apply,5},
                   {erl_eval,expr,5},
                   ...

</div>
++++


Summary: *sequential Erlang III*
--------------------------------
* Sequential Erlang I
* Sequential Erlang II
* Sequential Erlang III
** Run Time Errors
** Try ... catch
** Throw
** Catch

