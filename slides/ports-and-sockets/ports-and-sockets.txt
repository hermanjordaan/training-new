Ports and Sockets
=================
:revealjs_theme: esl
:revealjs_slideNumber: true
:revealjs_history: true
:revealjs_transition: linear
:revealjs_center: false
Erlang Solutions Ltd.
© 1999–2015 Erlang Solutions Ltd.

++++
<link rel="stylesheet" type="text/css" href="../../styles/svg.css"></link>
<script type="text/javascript" src="../../tools/snap.svg/snap.svg-min.js"></script>
++++

Ports and Sockets
-----------------
* UDP
* TCP
* Inet
* Ports


UDP
---
image::images/udp.png["UDP", auto, auto]
* The User Datagram Protocol is a connectionless protocol
* Provides no transmission error recovery
** It is left up to the application to ensure packet reception and ordering
* Has very little overhead
** It is ideal for transmissions where dropping a packet is more acceptable than waiting for it to be re-sent
* Implemented in the *gen_udp* module


UDP
---
* Opens a UDP socket on a local host, used for sending and receiving
* Some options when opening sockets include
** *list | binary* forwards messages either as lists or binaries
** *{active, once | true | false}* for active and passive socket modes
** *{header, Bytes}* splits the package in a list of length *Bytes* and a binary
** *{ip, IpAddress}* specifies which network interface to use when the computer has more than one
** *inet6* sets up the socket for IPv6


UDP
---
[role="centered"]
....
gen_udp:send(Socket, Address, Port, Packet)
gen_udp:recv(Socket, Length, Timeout)
gen_udp:controlling_process(Socket, Pid)
....

* *send(Socket, Port, Address, Packet)* allows to send a *Packet* through *Socket* to whatever is listening on *Port* at *Address*
* In passive mode, *recv/3* allows to receive a message from the socket.
* In active mode, messages are sent directly to the process in charge of the socket
* *gen_udp:controlling_process(Socket, Pid)* allows to change the process in charge of the socket.


UDP: *example*
--------------
++++
<svg id="udp_example_1" style="width:1100; height:650px;" viewBox="0 0 1100 650" preserveAspectRatio="xMinYMin meet">
<script>

var s1 = Snap("#udp_example_1");

s1.rect(10,8,1050,311).addClass("rect_code");
s1.text(20,40,"1> {ok, Socket} = gen_udp:open(1234).").addClass("code bold darkred")
s1.text(20,78,"{ok,#Port<0.512>}").addClass("code")
s1_g3 = s1.g(s1.text(20,116,"2> flush().").addClass("code bold darkred"),
       s1.text(20,154,"Shell got {udp,#Port<0.512>,{127,0,0,1},1235,\"Hello world\"}").addClass("code"),
       s1.text(20,192,"Shell got {udp,#Port<0.512>,{127,0,0,1},1235,\"Hello world\"}").addClass("code"),
       s1.text(20,230,"ok").addClass("code")
      ).addClass("hide");
s1_g5 = s1.g(s1.text(20,268,"3> gen_udp:close(Socket).").addClass("code bold darkred"),
       s1.text(20,306,"ok").addClass("code")
      ).addClass("hide");

s1.rect(10,334,1050,311).addClass("rect_code");
s1.text(20,366,"1> {ok, Socket} = gen_udp:open(1235).").addClass("code bold darkred");
s1.text(20,404,"{ok,#Port<0.512>}").addClass("code");
s1_g1 = s1.g(s1.text(20,442,"2> gen_udp:send(Socket,{127,0,0,1},1234,<<\"Hello world\">>).").addClass("code bold darkred"),
       s1.text(20,480,"ok").addClass("code")
      ).addClass("hide");
s1_g2 = s1.g(s1.text(20,518,"3> gen_udp:send(Socket,{127,0,0,1},1234,\"Hello world\").    ").addClass("code bold darkred"),
       s1.text(20,556,"ok").addClass("code")
      ).addClass("hide");
s1_g4 = s1.g(s1.text(20,594,"4> gen_udp:close(Socket).").addClass("code bold darkred"),
       s1.text(20,632,"ok").addClass("code")
      ).addClass("hide");

s1_anim1 = function() { s1_g1.animate({"opacity":"1"}, 250, mina.linear, s1_anim2) };
s1_anim2 = function() { s1_g2.animate({"opacity":"1"}, 250, mina.linear) };
s1_anim3 = function() { s1_g3.animate({"opacity":"1"}, 250, mina.linear) };
s1_anim4 = function() { s1_g4.animate({"opacity":"1"}, 250, mina.linear, s1_anim5) };
s1_anim5 = function() { s1_g5.animate({"opacity":"1"}, 250, mina.linear) };

var s1_counter=1
s1.click( function() {
  switch(s1_counter) {
    case 1: {s1_anim1(); s1_counter++; break};
    case 2: {s1_anim3(); s1_counter++; break};
    case 3: {s1_anim4(); s1_counter++; break};
    }
} );

</script>
</svg>
++++


UDP: *example*
--------------
++++
<svg id="udp_example_2" style="width:1100; height:650px;" viewBox="0 0 1100 650" preserveAspectRatio="xMinYMin meet">
<script>

var s2 = Snap("#udp_example_2");

s2.rect(10,8,1050,387).addClass("rect_code");
s2.text(20,40,"1> {ok,Socket}=gen_udp:open(1236,[binary,{active, false}]).").addClass("code bold darkred")
s2.text(20,78,"{ok,#Port<0.536>}").addClass("code")
s2_g3 = s2.g(s2.text(20,116,"2> flush().").addClass("code bold darkred"),
       s2.text(20,154,"ok").addClass("code")
      ).addClass("hide");
s2_g4 = s2.g(s2.text(20,192,"3> gen_udp:recv(Socket, 0).").addClass("code bold darkred"),
       s2.text(20,230,"{ok,{{127,0,0,1},1235,<<\"Hello world\">>}}").addClass("code")
      ).addClass("hide");;
s2_g5 = s2.g(s2.text(20,268,"4> gen_udp:recv(Socket, 0).").addClass("code bold darkred"),
       s2.text(20,306,"{ok,{{127,0,0,1},1235,<<\"Hello world\">>}}").addClass("code")
      ).addClass("hide");;
s2_g6 = s2.g(s2.text(20,344,"5> gen_udp:recv(Socket, 0, 10).").addClass("code bold darkred"),
       s2.text(20,382,"{error,timeout}").addClass("code")
      ).addClass("hide");;

s2.rect(10,410,1050,233).addClass("rect_code");
s2.text(20,442,"1> {ok, Socket} = gen_udp:open(1235).").addClass("code bold darkred")
s2.text(20,480,"{ok,#Port<0.539>}").addClass("code")
s2_g1 = s2.g(s2.text(20,518,"2> gen_udp:send(Socket,{127,0,0,1},1236,\"Hello world\").").addClass("code bold darkred"),
       s2.text(20,556,"ok").addClass("code")
      ).addClass("hide");;
s2_g2 = s2.g(s2.text(20,594,"3> gen_udp:send(Socket,{127,0,0,1},1236,<<\"Hello world\">>).").addClass("code bold darkred"),
       s2.text(20,632,"ok").addClass("code")
      ).addClass("hide");;

s2_anim1 = function() { s2_g1.animate({"opacity":"1"}, 250, mina.linear, s2_anim2) };
s2_anim2 = function() { s2_g2.animate({"opacity":"1"}, 250, mina.linear) };
s2_anim3 = function() { s2_g3.animate({"opacity":"1"}, 250, mina.linear) };
s2_anim4 = function() { s2_g4.animate({"opacity":"1"}, 250, mina.linear, s2_anim5) };
s2_anim5 = function() { s2_g5.animate({"opacity":"1"}, 250, mina.linear) };
s2_anim6 = function() { s2_g6.animate({"opacity":"1"}, 250, mina.linear) };

var s2_counter=1
s2.click( function() {
  switch(s2_counter) {
    case 1: {s2_anim1(); s2_counter++; break};
    case 2: {s2_anim3(); s2_counter++; break};
    case 3: {s2_anim4(); s2_counter++; break};
    case 4: {s2_anim6(); s2_counter++; break};
    }
} );

</script>
</svg>
++++


UDP: *example*
--------------
++++
<svg id="udp_example_3" style="width:1100; height:650px;" viewBox="0 0 1100 650" preserveAspectRatio="xMinYMin meet">
<script>

var s3 = Snap("#udp_example_3");

s3.rect(10,8,1050,349).addClass("rect_code");
s3.text(20,40,"1> {ok, Socket} = gen_udp:open(1234).").addClass("code bold darkred")
s3.text(20,78,"{ok,#Port<0.505>}").addClass("code")
s3_g1 = s3.g(s3.text(20,116,"2> Pid = spawn(fun() ->").addClass("code bold darkred"),
       s3.text(20,154,"2>   receive Msg -> io:format(\"Received: ~p~n\", [Msg]) end").addClass("code bold darkred"),
       s3.text(20,192,"2> end).").addClass("code bold darkred"),
       s3.text(20,230,"<0.34.0>").addClass("code")
      ).addClass("hide");
s3_g2 = s3.g(s3.text(20,268,"3> gen_udp:controlling_process(Socket, Pid).").addClass("code bold darkred"),
       s3.text(20,306,"ok").addClass("code")
      ).addClass("hide");
s3_g4 = s3.text(20,344,"Received: {udp,#Port<0.505>,{127,0,0,1},1235,\"Hello world\"}").addClass("code").addClass("hide");

s3.rect(10,372,1050,233).addClass("rect_code");
s3.text(20,404,"1> {ok, Socket} = gen_udp:open(1235).").addClass("code bold darkred")
s3.text(20,442,"{ok,#Port<0.539>}").addClass("code")
s3_g3 = s3.g(s3.text(20,480,"2> gen_udp:send(Socket, {127,0,0,1}, 1234, \"Hello world\").").addClass("code bold darkred"),
       s3.text(20,518,"ok").addClass("code")
      ).addClass("hide");
s3_g5 = s3.g(s3.text(20,556,"3> gen_udp:close(Socket).").addClass("code bold darkred"),
       s3.text(20,594,"ok").addClass("code")
      ).addClass("hide");

s3_anim1 = function() { s3_g1.animate({"opacity":"1"}, 250, mina.linear) };
s3_anim2 = function() { s3_g2.animate({"opacity":"1"}, 250, mina.linear) };
s3_anim3 = function() { s3_g3.animate({"opacity":"1"}, 250, mina.linear, s3_anim4) };
s3_anim4 = function() { s3_g4.animate({"opacity":"1"}, 250, mina.linear) };
s3_anim5 = function() { s3_g5.animate({"opacity":"1"}, 250, mina.linear) };

var s3_counter=1
s3.click( function() {
  switch(s3_counter) {
    case 1: {s3_anim1(); s3_counter++; break};
    case 2: {s3_anim2(); s3_counter++; break};
    case 3: {s3_anim3(); s3_counter++; break};
    case 4: {s3_anim5(); s3_counter++; break};
    }
} );

</script>
</svg>
++++


TCP
---
image::images/tcp.png["TCP", auto, auto]
* The Transmission Control Protocol is connection oriented
* The peers exchange streams of data
* Package reception and ordering is guaranteed
** Used for HTTP, IM, peer-to-peer applications, mail, Erlang distribution, etc.
* Implemented in the *gen_tcp* module


TCP
---
++++
<svg id="tcp_1" style="width:600; height:460px;" viewBox="0 0 600 460" preserveAspectRatio="xMinYMin meet" class="left">
<script>

var s4 = Snap("#tcp_1");

var arrow_end = s4.polygon([-2,0, -5,5, 5,0, -5,-5]).transform('r0');
var marker_end = arrow_end.marker(-6, -6, 12, 12).attr({"markerWidth":"6"});
var arrow_start = s4.polygon([-2,0, -5,5, 5,0, -5,-5]).transform('r180');
var marker_start = arrow_start.marker(-6, -6, 12, 12).attr({"markerWidth":"6"});

s4.text(435,70,"Client").addClass("code");
s4.circle(490,140,40).addClass("shape grey");

s4_g1 = s4.path("M180,140 l250,0").attr({"marker-start":marker_start, "marker-end":marker_end}).addClass("line hide");

s4_g2 = s4.text(70,45,"Listen").addClass("code print_hide");
s4_g3 = s4.text(70,45,"Accept").addClass("code").addClass("hide");
s4.text(62,80,"process").addClass("code");
s4.circle(120,140,40).addClass("shape darkred");

s4_g4 = s4.path("M65,140 Q-50,270 62,385").attr({"stroke-dasharray":"7,6", "marker-end":marker_end}).addClass("line dashed hide");

s4_g5 = s4.g(s4.text(70,305,"Listen").addClass("code"),
       s4.text(62,340,"process").addClass("code"),
       s4.circle(120,400,40).addClass("shape darkred")
      ).addClass("hide");

s4_anim1 = function() { s4_g1.animate({"opacity":"1"}, 250, mina.linear) };
s4_anim2 = function() { s4_g2.animate({"opacity":"0"}, 250, mina.linear); s4_g3.animate({"opacity":"1"}, 250, mina.linear, s4_anim3); };
s4_anim3 = function() { s4_g4.animate({"opacity":"1"}, 250, mina.linear, s4_anim4) };
s4_anim4 = function() { s4_g5.animate({"opacity":"1"}, 250, mina.linear) };

var s4_counter=1
s4.click( function() {
  switch(s4_counter) {
    case 1: {s4_anim1(); s4_counter++; break};
    case 2: {s4_anim2(); s4_counter++; break};
    }
} );

</script>
</svg>
++++

[role="right"]
* Once a connection is set up, it remains open until either side closes it
* A TCP server then requires a process to listen to incoming requests and to handle the connection.
* The listener process can either spawn an acceptor and go back to listening, or accept the connection itself, then spawn a new listener.


TCP: *clients*
--------------
[role="centered"]
....
gen_tcp:connect(Address, Port, Options) -> {ok, Socket}
gen_tcp:connect(Address, Port, Options, Timeout) -> {ok,Socket}
....

* A client process is responsible for starting a connection towards the server with *connect/3-4*
* Some options when connecting to a socket include:
** *list | binary* forwards messages either as lists or binaries.
** *{active, once | true | false}* for active and passive socket modes
** *{port, Port}* specifies which local port to use
** *inet6* sets up the socket for IPv6


TCP: *clients*
--------------
[role="left w_600"]
....
client(Host, Data) ->
  {ok, Socket} = 
  gen_tcp:connect(Host,1234,[]),
  send(Socket, Data),
  ok = gen_tcp:close(Socket).

send(Socket, <<Chunk:100/binary, 
Rest/binary>>) ->
  gen_tcp:send(Socket, Chunk),
  send(Socket, Rest);
send(Socket, Rest) ->
    gen_tcp:send(Socket, Rest).
 
 
 
 
....

[role="right"]
* A client process is responsible for starting a connection to the server
* A connection can be opened with *connect/3-4*
* It sends some data and closes the socket
* Data is sent with *send/2*
* The socket could have been closed by the other side.
* TCP connections can be closed with *close/1*


TCP: *servers*
--------------
++++
<div class="pre" style="text-align:center; padding:10pt 0 !important;">gen_tcp:listen(Port, Options) -> {ok, ListenSocket}
gen_tcp:accept(ListenSocket) -> {ok, Socket}
gen_tcp:accept(ListenSocket, Timeout) -> {ok, Socket}
</div>
++++

* The server must set up a special socket to listen to incoming connections. It is opened by calling *gen_tcp:listen(Port, Opts)*.
* Some options when opening a listen socket include:
** *list | binary* forwards messages either as lists or binaries.
** *{active, once | true | false}* for active and passive socket modes
** *{ip, IpAddress}* specifies which network interface to use when the computer has more than one.
** *inet6* sets up the socket for IPv6
* The server can accept a connection request with *accept/1-2*. A regular socket is returned


TCP: *servers*
--------------
....
start() -> spawn(fun server/0).

server() ->
    {ok, ListenSocket} = 
         gen_tcp:listen(1234,[binary,{active,false}]),
    spawn(?MODULE, wait_connect, [ListenSocket,0]),
    timer:sleep(infinity).
 
....

* The server creates a listen socket and passes it to a process in charge of listening
* The server's main loop sleeps to keep the socket alive
** When the server terminates, the listen socket and all the related sockets close with it


TCP: *servers*
--------------
....
wait_connect(ListenSocket, Count) ->
  {ok, Socket} = gen_tcp:accept(ListenSocket),
  spawn(?MODULE, wait_connect, [ListenSocket, Count+1]),
  get_request(Socket, [], Count).

get_request(Socket, BinaryList, Count) ->
  case gen_tcp:recv(Socket, 0, 5000) of
    {ok, Bin} ->
      get_request(Socket, [Bin|BinaryList], Count);
    {error, closed} ->
   io:format("~p: ~p~n",[Count,lists:reverse(BinaryList)])
  end.
....

* The listening socket accepts the connection, then spawns a new process to become the listener in its place.
* The process handles the socket request.


TCP: *example*
--------------
++++
<div class="left w_600">
<div class="pre"><b>1> tcp:start().</b>
<0.35.0>
<b>2> tcp:client({127,0,0,1}, <<"Hello, Concurrent World!">>).</b>
ok
0: [<<"Hello, Concurrent World!">>]
<b>3> tcp:client({127,0,0,1}, <<"Another process handles this">>).</b>
ok
1: [<<"Another process handles this">>]



</div></div>
++++

[role="right"]
* The TCP server is started and listens on port 1234
* The client establishes a connection with the listening process
* The listening process accepts the connection and becomes an accepting process
* A new listening process is spawned and waits for the next connection


Inet
----
* The *inet* module contains generic functions that will work on any sockets, whether you are using UDP or TCP.
* Allows to change socket options after they were started with *setopts(Socket, OptionList)*
* Lets you find what options were given to a socket with *getopts(Socket, Options)*
* Can retrieve statistics about a socket with  *getstat(Socket)*
* Can list all currently active sockets with *i()*


Inet: *example*
---------------
++++
<div class="pre"><b>1> {ok,Sock} = gen_udp:open(1234).</b>
{ok,#Port<0.528>}
<b>2> inet:getopts(Sock,[active,header,broadcast,keepalive]).</b>
{ok,[{active,true},{header,0},{broadcast,false},{keepalive,false}]}
<b>3> inet:setopts(Sock, [{active, once}]), 
3> inet:getopts(Sock, [active]).</b>
{ok,[{active,once}]
<b>4> gen_udp:send(Sock, {127,0,0,1}, 1234, "Hi").</b>
ok
<b>5> inet:getopts(Sock, [active]).</b>
{ok,[{active,false}]}
<b>6> flush().</b>
Shell got {udp,#Port<0.528>,{127,0,0,1},1234,"Hi"}


</div>
++++

[NOTE.speaker]
[role="speaker"]
--
Explain how {active, once} can be used to regulate message receiving between gen_udp/gen_tcp and inet to reset the option after each message received.
--

Inet: *example*
---------------
++++
<div class="pre"><b>1> {ok, Socket1} = gen_udp:open(1234),
1> {ok, Socket2} = gen_udp:open(1235).</b>
{ok,#Port<0.511>}
<b>2> gen_udp:send(Socket1, {127,0,0,1}, 1235, <<"test">>), 
2> gen_udp:send(Socket1, {127,0,0,1}, 1235, "test 2").</b>
ok
<b>3> inet:i().</b>
Port Module   Recv Sent Owner    Local Address   Foreign Address State 
505  inet_udp 0    10   <0.31.0> *:search-agent  *:*             BOUND 
511  inet_udp 10   0    <0.31.0> *:mosaicsyssvc1 *:*             BOUND 
<b>4> inet:getstat(Socket1).</b>
{ok,[{recv_oct,0},{recv_cnt,0},{recv_max,0},{recv_avg,0},
     {recv_dvi,0},{send_oct,10},{send_cnt,2},{send_max,6},
     {send_avg,5},{send_pend,0}]}

</div>
++++

[NOTE.speaker]
[role="speaker"]
--
oct=bytes, cnt=packets, max=largest packet in bytes, avg=average byte size, dvi=average byte size deviation, send_pend
--


Ports
-----
image::images/ports.png["Ports", auto, auto]

* Ports allow communication between an Erlang node and an external program
* The communication with the external program can be done through binary messages or standard input and output
* Ports act like Erlang processes that do not trap exits: they can be linked to, send and receive messages and receive exit signals
* Port functions are implemented in the *erlang* module


Ports
-----
[role="centered"]
....
open_port({spawn, Cmd}, Options) -> Port
....

* *Cmd* will be run as an external program
* Some options when opening a port include:
** *stream | {packet, N}* gives the size of binary packets to be used for this port. *N* can be 1, 2 or 4. If the packet size is variable, use stream.
** *binary* all I/O from the port comprises data objects instead of bytes
** *use_stdio* this uses the (Unix) standard input and output for communications. Use *nouse_stdio* to avoid this.
** *exit_status* ensures that a message is sent to the port when the external program exits.


Ports
-----
* The function *port_connect/2* allows to change the owner of the port. The previous owner remains linked to the port.
* *port_command(Port, Data)* is used to send *Data* to the *Port*
* Information about the port can be retrieved with *port_info/1*
* Ports can be closed with *port_close(Port)* when called from the controlling process.


Ports: *example (C program)*
----------------------------
[role="left w_600"]
....
/* echo.c */
#include <stdio.h>
#define BUFFER_LENGTH 80
int main() {
    char line[BUFFER_LENGTH];
    while (1) {
        if (fgets(line, BUFFER_LENGTH, stdin) != NULL) {
            printf("%s", line);
            printf("ECHOED\n");
            fflush(stdout);
        } else {
            return 0;
        }
    }
}
....

[role="right"]
* This program is an echo server that repeats what is sent on standard input, followed by "ECHOED".
* The Port has to make sure standard input is open (!= NULL), otherwise the port program will remain alive even after the Erlang VM terminates
* The output buffers need to be flushed, otherwise the program might not reply.


Ports: *example (Erlang program)*
---------------------------------
[role="left w_600"]
....
-module(echo).
-export([start/0, stop/1, repeat/2]).

start() -> open_port({spawn, "./echo.o"}, [stream, {line, 80}]).

stop(Port) -> port_close(Port).

repeat(Port, Msg) ->
  case is_valid(Msg) of
    false->erlang:error(badarg);
    true -> ok
  end,
  port_command(Port, Msg),
  get_reply(Port).
....

[role="right"]
* *start()* opens the port with the executable "echo.o"
* *stop(Port)* closes it
* *repeat(Port, Msg)* takes care of validating the message, sending it to the port and returning the port's reply.


Ports: *example (Erlang program)*
---------------------------------
....
is_valid(Msg) when length(Msg) =< 80 ->
    [Last|_] = lists:reverse(Msg),
    Total = length([1 || $\n <- Msg]),
    if Last =:= $\n, Total =:= 1 -> true;
       Last =/= $\n; Total =/= 1 -> false
    end;

is_valid(_) -> false.
....

* The port program is line-based. All messages coming from Erlang need to end with a line break
* Only one line break is allowed per message
* A line is 80 characters long at most.


Ports: *example (Erlang program)*
---------------------------------
++++
<div class="pre">get_reply(Port) -> get_reply(Port, []).
get_reply(Port, Acc) ->
 receive
  <b>{Port, {data, {eol, "ECHOED"}}}</b> ->
     {ok, lists:flatten(lists:reverse(Acc))};
  <b>{Port, {data,{eol, Line}}}</b> ->
     get_reply(Port,[Line|Acc]);
  <b>{Port,{data,{noeol, Txt}}}</b> ->
     get_reply(Port, [Txt|Acc])
 after 5000 ->
     {error, timeout, Acc}
 end.
</div>
++++

* The port replies with messages of the form *{Port, {data, Data}}*
* Assumes the port is sending data until it ends a line *(eol)* with "ECHOED"


Ports: *example (Erlang program)*
---------------------------------
++++
<div class="pre">
<b>1> os:cmd("gcc echo.c -o echo.o"),
1> Port = echo:start().</b>
#Port<0.510>
<b>2> echo:repeat(Port, "Hello, port!\n").</b>
{ok,"Hello, port!"}
<b>3> echo:repeat(Port, "How are you?\n").</b>
{ok,"How are you?"}
<b>4> erlang:port_info(Port).</b>
[{name,"./echo.o"}, {links,[<0.31.0>]}, {id,510},
connected,<0.31.0>}, {input,40}, {output,26}]
<b>5> echo:stop(Port).</b>
true
<b>6> erlang:port_info(Port).</b>
undefined
</div>
++++

Ports and Sockets
-----------------
* UDP
* TCP
* Inet
* Ports
