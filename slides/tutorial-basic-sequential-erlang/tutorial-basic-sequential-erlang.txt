Basic Sequential Erlang
=======================
:revealjs_theme: esl
:revealjs_slideNumber: true
:revealjs_history: true
:revealjs_transition: linear
:revealjs_center: false
Erlang Solutions Ltd.
© 1999–2015 Erlang Solutions Ltd.

++++
<link rel="stylesheet" type="text/css" href="../../styles/svg.css"></link>
<script type="text/javascript" src="../../tools/snap.svg/snap.svg-min.js"></script>
++++


Data Types: *integers, floats and atoms*
----------------------------------------
[role="left"]
....
10
-234
16#AB10F
$A
$\n

17.368
-56.654
12.34E-10

alpha21
start_with_lower_case
true, false
'January'
'a space'
....

[role="right"]
* Large integers are converted to bignums
* *B#Val* numbers in base *B*
* *$Char* for ASCII values
* IEEE 754 floating point
* Atoms are constant literals
* Start with a lower case letter or are encapsulated by ' '


Data Types: *tuples and lists*
------------------------------
[role="left"]
....
{123, bcd}
{abc, {def, 123}, ghi}
{person, 'Joe', 'Armstrong'}

[january, february, march]
[a,[b,[c,d,e],f],g]
[]
[{person, 'Joe', 'Armstrong'},
 {person, 'Robert', 'Virding'},
 {person, 'Mike', 'Williams'}]

[72,101,108,108,111]
[$H,$e,$l,$l,$o]
"Hello World"
....

[role="right"]
* Each used for collections of values …
* … they differ in how you can access and program with them.
* Tuples are used to denote data-types with a fixed number of items.
* Lists are used to store a variable number of items.
* Strings are lists of ASCII codes.


Data Types: *lists*
-------------------
++++
<div class="left">
<div class="pre" style="text-align:center;">
<svg id="data_types_lists_1" style="width:460px; height:410px;" viewBox="0 0 460 410" preserveAspectRatio="xMinYMin meet">
<script>

var s1 = Snap("#data_types_lists_1");

var arrow = s1.polygon([-2,0, -5,5, 5,0, -5,-5]).transform('r0').addClass("darkred");
var marker = arrow.marker(-6, -6, 12, 12).attr({"markerWidth":"6"});

s1.text(10,230,"List              List").addClass("code darkred bold");
s1.text(10,230,"     = [Element |      or").addClass("code");
s1.text(10,270,"       []").addClass("code");
s1.path("M355,190 S220,20 50,190").attr({"marker-end":marker, "stroke-width":"3.5"}).addClass("line_darkred");

</script>
</svg>
</div></div>
++++

[role="right"]
* A recursive list definition consists of a head and a tail
* Every list is either empty …
* … or has a head which is an element, 
* and a tail which is a list.


Variables
---------
++++
<div class="left">
<div class="pre">
<svg id="variables_1" style="width:500px; height:600px;" viewBox="0 0 500 600" preserveAspectRatio="xMinYMin meet">
<script>

var s2 = Snap("#variables_1");

var f_Shadow = s2.filter(Snap.filter.shadow(2, 2, 0, "#fff"));

s2.text(10,40,"A_long_variable_name").addClass("code");
s2.text(10,80,"Flag").addClass("code");
s2.text(10,120,"Name2").addClass("code");
s2.text(10,160,"DbgFlag").addClass("code");
s2.text(10,200,"_a_do_not_care_variable").addClass("code");
s2.text(10,240,"_").addClass("code");

s2.circle(240,420,130).attr({"fill":"none", "stroke":"#D5573B", "stroke-width":"36px"})
s2.path("M145,325 l200,190").attr({"stroke":"#D5573B", "stroke-width":"36px"});

s2_g1 = s2.g(s2.text(245,400,"Variables can").addClass("bold middle").attr({"font-family":"Courier ", "font-size":"26pt"}),
             s2.text(245,440,"only be").addClass("bold middle").attr({"font-family":"Courier", "font-size":"26pt"}),
             s2.text(245,480,"bound once!").addClass("bold middle").attr({"font-family":"Courier", "font-size":"26pt"})).attr({filter:f_Shadow});

</script>
</svg>
</div></div>
++++

[role="right"]
* Variables can start with an uppercase letter or _
* No 'funny characters'
* _ alone is a don't care variable.
* Single assignment.
* No need to declare them. 
* Types are determined at run time


Complex Data Structures
-----------------------
....
[{{person, "Joe", "Armstrong"},
  [{telephone_number, [3,5,9,7]},
   {shoe_size, 42},
   {pets, [{cat, tubby}, {cat, tiger}]},
   {children, [{thomas, 5}, {claire, 1}]}]
 },
 {{person, "Mike", "Williams"},
  [{shoe_size, 41},
   {likes, [boats, beer]}]
 }
].
....


Complex Data Structures
-----------------------
* Arbitrary complex data structures can be created by nesting other data structures
* Data structures may contain bound variables
* Data structures are created by writing them down
* No explicit memory allocation or deallocation is needed
** Allocated automatically
** Deallocated by the *garbage collector* when no longer referenced.


Pattern Matching
----------------
[role="centered darkred bold f_30pt"]
....
 
Pattern = Expression
 
....

* Pattern matching is used for:
** Assigning values to variables
** Controlling the execution flow of programs (if, case, function heads)
** Extracting values from compound data types
** The pattern can contain variables which are bound when the matching succeeds
* The expression may not contain unbound variables


Pattern matching
----------------
++++
<div class="left w_600"><div class="pre">
A = 10
{B, C, D} = {10, foo, bar}
{E, E, foo} = {abc, abc, foo}
[H|T] = [1,2,3]

{A, A, B} = {abc, def, 123}   <span class="darkred bold" style="font-size:30pt;">×</span>
[A,B,C,D] = [1,2,3]           <span class="darkred bold" style="font-size:30pt;">×</span>
[H|T] = []                    <span class="darkred bold" style="font-size:30pt;">×</span>

{A, _, [B|_], {B}} 
  = {abc, 23, [22, x], {22}}
C = 10, {C, C, 3} = {10, 10, 3}


</div></div>
++++	

[role="right"]
* Assignment of one or more variables.
* Pattern matching can succeed, binding all the variables, …
* … or fail, binding none.
* Selection of components from complex data structures.


Functions: *calls*
------------------
[role="centered code"]
....
 
module:function(Arg1, Arg2, ..., ArgN)
function(Arg1, Arg2, ..., ArgN)
 
....

* Erlang programs consist of functions that call each other
* Functions are defined within modules
* Function names and module names must be atoms
* the arity of a function is its number of arguments.


Functions: *syntax*
-------------------
....
circumference(R) ->
    2 * math:pi() * R.


product(X, Y) -> X * Y.

product(X, Y, Z) -> X * Y * Z.
 
 
 
....


Functions: *syntax*
-------------------
++++
<svg id="functions_syntax_1" style="width:1000px; height:550px;" viewBox="0 0 1000 550" preserveAspectRatio="xMinYMin meet">
<script>

var s3 = Snap("#functions_syntax_1");

var arrow = s3.polygon([-2,0, -5,5, 5,0, -5,-5]).transform('r0').addClass("darkred");
var marker = arrow.marker(-6, -6, 12, 12).attr({"markerWidth":"6"});

s3.text(250,140,"area({square, Side}) ->").addClass("code");
s3.text(250,185,"    Side * Side;").addClass("code");
s3.text(250,230,"area({circle, Radius}) ->").addClass("code");
s3.text(250,275,"    3.1416 * Radius * Radius;").addClass("code");
s3.text(250,320,"area({triangle, A, B, C}) ->").addClass("code");
s3.text(250,365,"    S = (A + B + C) / 2,").addClass("code");
s3.text(250,410,"    math:sqrt(S*(S-A)*(S-B)*(S-C)).").addClass("code");

s3_g1 = s3.g(s3.text(10,290,"function").addClass("darkred"),
                 s3.text(15,325,"clauses").addClass("darkred"),
                 s3.path("M130 300 l110 -115").attr({"marker-end":marker}).addClass("line_darkred"),
                 s3.path("M130 300 l110 -30").attr({"marker-end":marker}).addClass("line_darkred"),
                 s3.path("M130 300 l110 60").attr({"marker-end":marker}).addClass("line_darkred")).addClass("hide");

s3_g2 = s3.g(s3.text(650,100,"clause separator").addClass("darkred"),
             s3.circle(520,178,15).addClass("line_darkred"),
             s3.circle(747,268,15).addClass("line_darkred"),
             s3.path("M760 110 l-214 60").attr({"marker-end":marker}).addClass("line_darkred"),
             s3.path("M760 110 l-10 132").attr({"marker-end":marker}).addClass("line_darkred")).addClass("hide");

s3_g3 = s3.g(s3.text(390,480,"function").addClass("darkred"),
             s3.text(378,515,"terminator").addClass("darkred"),
             s3.path("M520 485 l310 -68").attr({"marker-end":marker}).addClass("line_darkred"),
             s3.circle(853,407,15).addClass("line_darkred")).addClass("hide");

s3_g4 = s3.g(s3.text(60,50,"clause head").addClass("darkred"),
             s3.path("M155 60 l85 55").attr({"marker-end":marker}).addClass("line_darkred")).addClass("hide");

s3_g5 = s3.g(s3.text(830,265,"clause body").addClass("darkred"),
             s3.path("M835 273 l-12 48").attr({"marker-end":marker}).addClass("line_darkred"),
             s3.rect(307,332,557,93,18).addClass("line_darkred").attr({"stroke-dasharray":"8,6"})).addClass("hide");

s3_g6 = s3.g(s3.text(830,480,"expression").addClass("darkred"),
             s3.text(840,515,"separator").addClass("darkred"),
             s3.path("M865 455 l-182 -82").attr({"marker-end":marker}).addClass("line_darkred"),
             s3.circle(660,364,15).addClass("line_darkred")).addClass("hide");

var s3_counter=1
s3.click( function() {
  switch(s3_counter) {
    case 1: {s3_g1.animate({"opacity":"1"}, 250, mina.linear); s3_counter++; break};
    case 2: {s3_g2.animate({"opacity":"1"}, 250, mina.linear); s3_g1.animate({"opacity":"0"}, 250, mina.linear); s3_counter++; break};
    case 3: {s3_g3.animate({"opacity":"1"}, 250, mina.linear); s3_g2.animate({"opacity":"0"}, 250, mina.linear); s3_counter++; break};
    case 4: {s3_g4.animate({"opacity":"1"}, 250, mina.linear); s3_g3.animate({"opacity":"0"}, 250, mina.linear); s3_counter++; break};
    case 5: {s3_g5.animate({"opacity":"1"}, 250, mina.linear); s3_g4.animate({"opacity":"0"}, 250, mina.linear); s3_counter++; break};
    case 6: {s3_g6.animate({"opacity":"1"}, 250, mina.linear); s3_g5.animate({"opacity":"0"}, 250, mina.linear); s3_counter++; break};
    case 7: {s3_g6.animate({"opacity":"0"}, 250, mina.linear); s3_counter++; break};
    }
} );

</script>
</svg>
++++


Functions: *syntax*
-------------------
++++
<div class="left" style="width:560px;">
  <div class="pre"><b>Func(Pattern1, Pattern2, ...) -></b>
   &lt;expression 1&gt;,
   &lt;expression 2&gt;,
   ...
   &lt;expression n&gt;;
<b>Func(Pattern1, Pattern2, ...) -></b>
   &lt;expression 1&gt;,
   &lt;expression 2&gt;,
   ...
   &lt;expression n&gt;;
...
<b>Func(Pattern1, Pattern2, ...) -></b>
   &lt;expression 1&gt;,
   &lt;expression 2&gt;,
   ...
   &lt;expression n&gt;.
</div></div>
++++

[role="right"]
* A function is defined as a collection of clauses
* Variables are pattern matched in the function clause head
* If pattern matching fails on a clause, the next one is tested
* The first clause matched is used
* The last expression executed in the clause body is returned


Functions: *examples*
---------------------
[role="left w_600"]
....
factorial(0) -> 1;
factorial(N) ->
    N * factorial(N-1).


> factorial(3).
   (matches N = 3 in clause 2)
   == 3 * factorial(3-1)
   (matches clause 2)
   == 3 * 2 * factorial(2-1)
   (matches clause 2)
   == 3 * 2 * 1 * factorial(1-1)
   (matches clause 1)
   == 3 * 2 * 1 * 1
   == 6
 
....

[role="right"]
* Pattern matching occurs in the function head
** Unbound variables get bound after a successful pattern match
* Variables are local to each clause
* Variables are allocated and deallocated automatically


Modules
-------
++++
<svg id="modules_1" style="width:1000px; height:600px; margin-top:-30px;" viewBox="0 0 1000 600" preserveAspectRatio="xMinYMin meet">
<script>

var s4 = Snap("#modules_1");

var arrow = s4.polygon([-2,0, -5,5, 5,0, -5,-5]).transform('r0').addClass("darkred");
var marker = arrow.marker(-6, -6, 12, 12).attr({"markerWidth":"6"});

s4.text(250,130,"-module(demo).").addClass("code");
s4.text(250,174,"-export([double/1]).").addClass("code");
s4.text(250,218," ").addClass("code");
s4.text(250,262,"% This is a comment.").addClass("code");
s4.text(250,306,"% Everything after '%' is ignored.").addClass("code");
s4.text(250,350," ").addClass("code");
s4.text(250,394,"double(X) ->").addClass("code");
s4.text(250,438,"    times(X, 2).").addClass("code");
s4.text(250,482," ").addClass("code");
s4.text(250,526,"times(X, N) ->").addClass("code");
s4.text(250,570,"    X * N.").addClass("code");

// module_directives
s4_g1 = s4.g(s4.text(20,110,"module").addClass("darkred"),
             s4.text(10,145,"directives").addClass("darkred"),
             s4.path("M150 116 l80 3").attr({"marker-end":marker}).addClass("line_darkred"),
             s4.path("M150 116 l80 45").attr({"marker-end":marker}).addClass("line_darkred")).addClass("hide");

// module_name
s4_g2 = s4.g(s4.text(550,30,"module").addClass("darkred"),
             s4.text(562,65,"name").addClass("darkred"),
             s4.path("M550 45 l-92 53").attr({"marker-end":marker}).addClass("line_darkred"),
             s4.ellipse(424,120,40,21).addClass("line_darkred")).addClass("hide");

// exported_functions
s4_g3 = s4.g(s4.text(12,310,"exported").addClass("darkred"),
             s4.text(10,345,"functions").addClass("darkred"),
             s4.path("M115 280 l285 -93").attr({"marker-end":marker}).addClass("line_darkred"),
             s4.ellipse(474,164,87,26).addClass("line_darkred")).addClass("hide");

// arity
s4_g4 = s4.g(s4.text(720,230,"arity").addClass("darkred"),
             s4.path("M710 223 l-140 -40").attr({"marker-end":marker}).addClass("line_darkred"),
             s4.ellipse(540,165,26,24).addClass("line_darkred")).addClass("hide");

// functions
s4_g5= s4.g(s4.text(692,490,"functions").addClass("darkred"),
             s4.path("M680 480 l-140 -60").attr({"marker-end":marker}).addClass("line_darkred"),
             s4.path("M680 480 l-150 30").attr({"marker-end":marker}).addClass("line_darkred")).addClass("hide");

var s4_counter=1
s4.click( function() {
  switch(s4_counter) {
    case 1: {s4_g1.animate({"opacity":"1"}, 250, mina.linear); s4_counter++; break};
    case 2: {s4_g2.animate({"opacity":"1"}, 250, mina.linear); s4_g1.animate({"opacity":"0"}, 250, mina.linear); s4_counter++; break};
    case 3: {s4_g3.animate({"opacity":"1"}, 250, mina.linear); s4_g2.animate({"opacity":"0"}, 250, mina.linear); s4_counter++; break};
    case 4: {s4_g4.animate({"opacity":"1"}, 250, mina.linear); s4_g3.animate({"opacity":"0"}, 250, mina.linear); s4_counter++; break};
    case 5: {s4_g5.animate({"opacity":"1"}, 250, mina.linear); s4_g4.animate({"opacity":"0"}, 250, mina.linear); s4_counter++; break};
    case 6: {s4_g5.animate({"opacity":"0"}, 250, mina.linear); s4_counter++; break};
    }
} );

</script>
</svg>
++++

Modules
-------
* Modules are stored in files with the *.erl* suffix
* The module and file names must be the same
** You store the module *demo* in *demo.erl*
* Modules are named with the *-module(Name).* directive
* Exported functions can be called from outside the module


Modules
-------
* Use *-export([Function/Arity, Function/Arity, ...])*
* Local functions may only be called within the module
* Prefix function calls with the module name when making a call from outside the module
** *Module:Fun(Arg1, ...)*
** This is a *fully qualified call*


Basic Erlang Exercises
----------------------
[role="left"]
....
-module(shapes).
-export([area/1]).

area({square, Side})        -> 
     Side * Side ;
area({circle, Radius})      -> 
     3.14 * Radius * Radius;
area({triangle, A, B, C})  -> 
     S = (A + B + C)/2.
 
 
 
....

[role="right"]
* Type the following module in the file *shapes.erl*
* Compile it in the shell using *c(shapes)*.
* Run it using *shapes:area(...)*.
* It will help you understand the structure of Erlang programs and pattern matching. 


Conditional Evaluation: *case*
------------------------------
++++
<svg id="conditional_evaluation_case_1" style="height:600px; width:1000px;">
<script>

s5 = Snap("#conditional_evaluation_case_1");

arrow = s5.polygon([0,0, 4,2, 0,4]).attr({"fill":"#000"}).transform('r0').addClass("darkred");
marker = arrow.marker(0,0, 4,4, 3,2);

s5.text(300,200,"case").addClass("code bold");
s5.text(300,200,"     lists:member(foo, List) of").addClass("code");
s5.text(300,200,"                             of").addClass("code bold");
s5.text(300,245,"    true -> ok;").addClass("code");
s5.text(300,290,"    false -> {error, unknown}").addClass("code");
s5.text(300,335,"end").addClass("code bold");

s5_g1 = s5.g(s5.text(400,50,"expression").addClass("darkred"),
             s5.path("M480,60 l35,110").attr({"marker-end":marker}).addClass("line_darkred")).addClass("hide");

s5_g2 = s5.g(s5.text(40,230,"case").addClass("darkred"),
             s5.text(20,265,"clauses").addClass("darkred"),
             s5.path("M135,235 l190,0").attr({"marker-end":marker}).addClass("line_darkred"),
             s5.path("M135,235 l190,42").attr({"marker-end":marker}).addClass("line_darkred")).addClass("hide");

s5_g3 = s5.g(s5.text(880,120,"clause").addClass("darkred"),
             s5.text(860,155,"separator").addClass("darkred"),
             s5.circle(553,238,15).addClass("line_darkred"),
             s5.path("M920,170 Q900,250 574,238").attr({"marker-end":marker}).addClass("line_darkred")).addClass("hide");

s5_g4 = s5.g(s5.text(802,360,"no separator").addClass("darkred"),
             s5.text(800,395,"in last clause").addClass("darkred"),
             s5.circle(823,280,15).addClass("line_darkred"),
             s5.path("M885,335 l-46,-42").attr({"marker-end":marker}).addClass("line_darkred")).addClass("hide");

s5_g5 = s5.g(s5.text(350,450,"patterns").addClass("darkred"),
             s5.ellipse(414,258,65,54).addClass("line_darkred"),
             s5.path("M400,420 l12,-103").attr({"marker-end":marker}).addClass("line_darkred")).addClass("hide");

s5_g6 = s5.g(s5.text(550,430,"clause body").addClass("darkred"),
             s5.rect(520,257,293,45,12).addClass("line_darkred").attr({"stroke-dasharray":"8,6"}),
             s5.path("M640,400 l30,-93").attr({"marker-end":marker}).addClass("line_darkred")).addClass("hide");

s5_counter=1
s5.click( function() {
  switch(s5_counter) {
    case 1: {s5_g1.animate({"opacity":"1"}, 250, mina.linear); s5_counter++; break};
    case 2: {s5_g2.animate({"opacity":"1"}, 250, mina.linear); s5_g1.animate({"opacity":"0"}, 250, mina.linear); s5_counter++; break};
    case 3: {s5_g3.animate({"opacity":"1"}, 250, mina.linear); s5_g2.animate({"opacity":"0"}, 250, mina.linear); s5_counter++; break};
    case 4: {s5_g4.animate({"opacity":"1"}, 250, mina.linear); s5_g3.animate({"opacity":"0"}, 250, mina.linear); s5_counter++; break};
    case 5: {s5_g5.animate({"opacity":"1"}, 250, mina.linear); s5_g4.animate({"opacity":"0"}, 250, mina.linear); s5_counter++; break};
    case 6: {s5_g6.animate({"opacity":"1"}, 250, mina.linear); s5_g5.animate({"opacity":"0"}, 250, mina.linear); s5_counter++; break};
    case 7: {s5_g6.animate({"opacity":"0"}, 250, mina.linear); s5_counter++; break};
    }
} );

</script>
</svg>
++++


Conditional Evaluation: *case*
------------------------------
++++
<div class="left">
<div class="pre"><b>case</b> &lt;expression&gt; <b>of</b>
    Pattern1 ->
        &lt;expression 1&gt;,
        &lt;expression 2&gt;,
        ...
        &lt;expression N&gt;;
   Pattern2 -&gt;
        &lt;expression 1&gt;,
        &lt;expression 2&gt;,
        ...
        &lt;expression N&gt;;
   _ -&gt;
        &lt;expression 1&gt;,
        ...
        &lt;expression N&gt;
<b>end</b>
</div></div>
++++

[role="right"]
* One branch should always succeed
* Using an unbound variable or '_' ensures that the clause will always match
* The _ clause is not mandatory
* An exception is raised if no clause matches
* Returns the value of the last executed expression


Defensive Programming
---------------------
++++
<div class="left">
<div class="pre">convert(Day) ->
  case Day of
      monday    -> 1;
      tuesday   -> 2;
      wednesday -> 3;
      thursday  -> 4;
      friday    -> 5;
      saturday  -> 6;
      sunday    -> 7;
      <b>Other ->
         {error, unknown_day}</b>
  end.
</div></div>
++++

[role="right"]
* Defensive programming: program in the convert function for the error case or ...
* ... let it fail here by deleting the *Other* clause.
* This will raise an exception
* The caller will have to handle the error that they have caused.


Guards
------
++++
<div class="left">
<div class="pre">factorial(N) <b>when</b> N > 0 ->
    N * factorial(N - 1);
factorial(0) -> 1.


 <strong>This is <b>NOT</b> the same as...</strong>

factorial(0) -> 1;
factorial(N) ->
    N * factorial(N - 1).

</div></div>
++++

[role="right"]
* The reserved word when introduces a guard
* Fully guarded clauses can be re-ordered
* Guards can be used in function heads, case clauses, receive and if expressions.


Guards: *examples*
------------------
....
number(Num) when is_integer(Num) -> integer;
number(Num) when is_float(Num) -> float;
number(_Other) -> false.
....

* is_number(X), is_integer(X), is_float(X)
** X is a number
* is_atom(X), is_pid(X), is_tuple(X), is_list(X)
** X is the specified datatype
* length(List) == Int, tuple_size(Tuple) == Size, X > Y + Z
** Some BIFs and mathematical applications can be applied in guards
* X == Y        X /= Y        X =:= Y        X =/= Y
** X is (not) equal to Y, X is exactly (not) equal to Y  (1==1.0 ✓, 1=:=1.0 ×)
* X =< Y        X >= Y
** NB, not \++++++++++--<= or \=>


Guards
------
....
valid_age(Age) when Age >= 18, Age =< 99 ->
    true;
valid_age(_) ->
    false.
 
 
 
....

* All variables in guards have to be bound
* Guards have to be free of side effects
* If all the guards have to succeed, use , to separate them
* If one guard has to succeed, use ; to separate them
* There are restrictions on BIFs and expressions in guards
** See the Erlang reference manual for complete details


Conditional Evaluation: *if*
----------------------------
++++
<svg id="conditional_evaluation_if" style="height:550px; width:900px;">
<script>

s6 = Snap("#conditional_evaluation_if");

arrow = s6.polygon([0,0, 4,2, 0,4]).attr({"fill":"#000"}).transform('r0').addClass("darkred");
marker = arrow.marker(0,0, 4,4, 3,2);

s6.text(300,200,"if").addClass("code bold");
s6.text(300,245,"   X < 1  -> smaller;").addClass("code");
s6.text(300,290,"   X > 1  -> greater;").addClass("code");
s6.text(300,335,"   X == 1 -> equal").addClass("code");
s6.text(300,380,"end").addClass("code bold");

s6_g1 = s6.g(s6.text(40,287,"if clauses").addClass("darkred"),
             s6.path("M184,280 l158,0").attr({"marker-end":marker}).addClass("line_darkred"),
             s6.path("M184,280 l158,-45").attr({"marker-end":marker}).addClass("line_darkred"),
             s6.path("M184,280 l158,45").attr({"marker-end":marker}).addClass("line_darkred")).addClass("hide");

s6_g2 = s6.g(s6.text(740,100,"clause").addClass("darkred"),
             s6.text(720,135,"separator").addClass("darkred"),
             s6.circle(658,238,15).addClass("line_darkred"),
             s6.circle(658,283,15).addClass("line_darkred"),
             s6.path("M760,150 l-86,76").attr({"marker-end":marker}).addClass("line_darkred"),
             s6.path("M760,150 l-86,121").attr({"marker-end":marker}).addClass("line_darkred")).addClass("hide");

s6_g3 = s6.g(s6.text(622,430,"no separator").addClass("darkred"),
             s6.text(620,465,"in last clause").addClass("darkred"),
             s6.circle(632,328,15).addClass("line_darkred"),
             s6.path("M705,400 l-58,-58").attr({"marker-end":marker}).addClass("line_darkred")).addClass("hide");

s6_g4 = s6.g(s6.text(190,515,"guard expressions").addClass("darkred"),
             s6.rect(340,212,128,134,12).addClass("line_darkred").attr({"stroke-dasharray":"8,6"}),
             s6.path("M310,490 l80,-140").attr({"marker-end":marker}).addClass("line_darkred")).addClass("hide");

s6_g5 = s6.g(s6.text(390,450,"clause body").addClass("darkred"),
             s6.rect(520,305,105,42,12).addClass("line_darkred").attr({"stroke-dasharray":"8,6"}),
             s6.path("M475,420 l60,-68").attr({"marker-end":marker}).addClass("line_darkred")).addClass("hide");

s6_counter=1
s6.click( function() {
  switch(s6_counter) {
    case 1: {s6_g1.animate({"opacity":"1"}, 250, mina.linear); s6_counter++; break};
    case 2: {s6_g2.animate({"opacity":"1"}, 250, mina.linear); s6_g1.animate({"opacity":"0"}, 250, mina.linear); s6_counter++; break};
    case 3: {s6_g3.animate({"opacity":"1"}, 250, mina.linear); s6_g2.animate({"opacity":"0"}, 250, mina.linear); s6_counter++; break};
    case 4: {s6_g4.animate({"opacity":"1"}, 250, mina.linear); s6_g3.animate({"opacity":"0"}, 250, mina.linear); s6_counter++; break};
    case 5: {s6_g5.animate({"opacity":"1"}, 250, mina.linear); s6_g4.animate({"opacity":"0"}, 250, mina.linear); s6_counter++; break};
    case 6: {s6_g5.animate({"opacity":"0"}, 250, mina.linear); s6_counter++; break};
    }
} );

</script>
</svg>
++++


Conditional Evaluation: *if*
----------------------------
++++
<div class="left">
<div class="pre"><b>if</b> Guard1 ->
        &lt;expression 1&gt;,
        &lt;expression 2&gt;,
        ...
        &lt;expression N&gt;;
   Guard2 -&gt;
        &lt;expression 1&gt;,
        &lt;expression 2&gt;,
        ...
        &lt;expression N&gt;;
   ...
   true -&gt;
        &lt;expression 1&gt;,
        ...
        &lt;expression N&gt;
<b>end</b>
</div></div>
++++

[role="right"]
* One branch must always succeed
* By using *true* as the last guard, we ensure that a clause will always succeed
* The *true* guard is not mandatory
* An exception is raised if no clause succeeds
* Returns the value of the last executed expression


General Switch
--------------
++++
<div class="pre">if <b>f(Args)</b> -> ok;
   true    -> error
end<div style="color:red; font-family:'Lucida Grande'; font-weight:bold; font-size:2em; position:absolute; left:500px; top:15px;">×</div>
case <b>f(Args)</b> of
    true -> ok;
    false -> error
end<div style="color:green; font-family:'Lucida Grande'; font-size:2em; position:absolute; left:500px; top:150px;">✓</div>
</div>
++++

* The if construct fails because it involves a user-defined function, which are forbidden in guards
* The case construct succeeds because it accepts user-defined functions.


Built-in Functions
------------------
[role="left"]
....
date()

time()

length(List)

size(Tuple)

atom_to_list(Atom)

list_to_tuple(List)

integer_to_list(2235)

tuple_to_list(Tuple)
  
....

[role="right"]
* Do what you cannot do (or is difficult to do) in Erlang
* Mostly written in C for fast execution
* BIFs are by convention regarded as being in the *erlang* module.


Built-in Functions
------------------
* There are BIFs for:
** Process and port handling
** Object access and examination
** Meta programming
** Type conversion
** System information
** Distribution
** Others
* For a complete list, see the manual page for the *erlang* module.


Recursion: *traversing lists*
-----------------------------
[role="left"]
....
average(X) -> sum(X) / len(X).

sum([H|T]) -> H + sum(T);
sum([]) -> 0.

len([_|T]) -> 1 + len(T);
len([]) -> 0.
 
 
 
 
....

[role="right"]
* Note the pattern of recursion is the same in both cases
* Taking a list and evaluating an element is a very common pattern


Recursion: *self-describing code*
---------------------------------
[role="left"]
....
sum([]) -> 0;

sum([H|T]) -> H + sum(T).
 
 
 
 
 
 
 
....

[role="right"]
* You can read the programs as an executable description:
* "The sum of an empty list is 0."
* "The sum of a non-empty list is the head of the list added to the sum of the tail"


Recursion: *traversing lists*
-----------------------------
[role="left"]
....
printAll([]) ->
    io:format("~n",[]);

printAll([X|Xs]) ->
    io:format("~p ",[X]),
    printAll(Xs).
 
 
 
 
....

[role="right"]
* Here we're traversing the list imperatively:
* "If there are no more elements to process, stop"
* "If there are further elements, process the head, and then call the function recursively on the tail."


Recursion: *traversing lists*
-----------------------------
[role="left"]
....
printAll(Ys) ->
    case Ys of
      [] ->
        io:format("~n",[]);
      [X|Xs] ->
        io:format("~p ",[X]),
        printAll(Xs)
    end.
 
 
....

[role="right"]
* Same function again: shows the loop clearly. The call to *printAll(Xs)* is like a *jump* back to the top of the loop.
* This is a *tail recursive* function: the only recursive calls come at the end of the bodies of the clauses.


Recursion: *more patterns*
--------------------------
[role="left"]
....
double([H|T])-> [2*H|double(T)];
double([]) -> [].

member(H, [H|_]) -> true;
member(H, [_|T]) -> member(H,T);
member(_, [])    -> false.

even([H|T]) when H rem 2 == 0 ->
    [H|even(T)];
even([_|T]) ->
    even(T);
even([]) ->
    [].
 
 
....

[role="right"]
* *double/1* maps elements in a list and returns a new list
* *member/2* is a predicate looking for an element in a list
* *even/1* filters a list of integers and returns the subset of even numbers
* The function *member/2* is the only one which is tail recursive


Recursion: *accumulators*
-------------------------
[role="left"]
....
average(X) -> average(X,0,0).

average([H|T], Length, Sum) ->
  average(T, Length+1, Sum+H);
average([], Length, Sum) ->
  Sum/Length.
 
 
 
 
 
....

[role="right"]
* Only traverses the list once.
* Executes in constant space (tail recursive)
* *Length* and *Sum* play the role of accumulators
* *average([])* is not defined
* Evaluating *average([])* would cause a run time error.


Sequential Programming Exercises
--------------------------------

* _Evaluating Expressions_

A.   Write a function sum/1 which given a positive integer N  will return the sum of all the integers between 1 and N.  + 
     _Example:_ sum(5)  15.
B.   Write a function sum/2 which given two integers N and M, where N =< M, will return the sum of the interval between N and M. If N > M, you want your process to terminate abnormally.  + 
     _Example:_ sum(1,3)  6. sum(6,6)  6.

* _Creating Lists_

A.  Write a function which returns the list [1,2,..,N-1,N].  + 
    _Example:_ create(3)  [1,2,3].
B.  Write a function which returns the list [N, N-1,..,2,1].  + 
    _Example:_ reverse_create(3)  [3,2,1].
