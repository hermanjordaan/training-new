Match Specifications
====================
:revealjs_theme: esl
:revealjs_slideNumber: true
:revealjs_history: true
:revealjs_transition: linear
:revealjs_center: false
Erlang Solutions Ltd.
© 1999–2015 Erlang Solutions Ltd.

++++
<link rel="stylesheet" type="text/css" href="../../styles/svg.css"></link>
<script type="text/javascript" src="../../tools/snap.svg/snap.svg-min.js"></script>
++++


Match Specifications
--------------------
* Match Specifications
* Head
* Condition
* Body
* Literal Funs


Match Specification
-------------------
* A program implemented as a set of Erlang terms
* Limited in functionality
* Efficiently implemented
* Match specifications
** will a set of parameters
** if the match is successful
** a trace event is generated
** actions will be executed


Match Specification
-------------------

//NOTE: formatting different

[role="centered"]
....
[{Head, Conditions, Body}]
....

* A list containing one or more specifications
* In the head you match and bind variables
* In the conditions logical tests are applied
* In the body actions to be taken are specified

[NOTE.speaker]
[role="speaker"]
--
Each spec is basically a clause pattern+guard+body
condition is a guard
--


Head
----
* A pattern containing variables
** Variables are of the form ‘$int()’
** ‘$0’, ‘$1’, etc ...
** are bound if the head matches
** the don’t care variable ‘_’ never gets bound
* ‘_’ can be used to match all functions arities
** [‘_’, Conditions, Body]
* All literal and composite types are interpreted as is
** differs from the Conditions and Body sections


Head
----
[role="left"]
....
[{[‘$1’,’$1’],
  [],
  []}]




[{[{‘$1’,’$2’},[‘$1’,’$2’|’_’]],
  [],
  []}]
 
 
 
 
 
....

[role="right"]
* Match function of arity 2
** The arguments are the same
** foo(42, 42)
{empty}  +  
{empty}  +
* Match function of arity 2
** First arguments a tuple of size 2
** The second argument is a list whose first 2 elements are identical to those in the tuple
** foo({17, 42}, [17,42,4711])


Conditions
----------
* Allows for logical tests on variables
** All variables must be bound
* Tuples have a special syntax
** {const,Tuple} or {Tuple} represent a tuple
* You can combine several logical tests
* ‘$_’ expands to the whole parameter list
** Works only in the body and the conditions
* ‘$$’ returns a list of all bound variables

[NOTE.speaker]
[role="speaker"]
--
Conditions are basically a guard
‘$_’ and ‘$$’ are mainly interesting in the body
--


Conditions
----------
[role="left"]
....
[{[‘$1’,’$2’,’$3’],
  [{‘orelse’,
    {‘=:=’,’$1’,’$2’},
    {‘and’,
     {‘=:=’,’$1’,{hd,’$3’}},
     {‘=:=’,’$2’,{hd,{tl,’$3’}}}
   }],
  []
 }]

[{[‘$1’,’$2’],
  [{‘and’,{‘>=’,’$1’,0},
          {‘=<‘,’$2’,10}}],
  []
 }]
 
 
....

[role="right"]
* Will match when
** ‘$1’ =:= ‘$2’ or
** ‘$3’ =:= [‘$1’,’$2’|’_’]
** foo(1, 2, [1,2,3])
{empty}  +  
{empty}  +
{empty}  +
{empty}  +
{empty}  +
{empty}  +
* Will match when
** ‘$1’ >= 0
** ‘$2’ =< 10
** foo(0, 10)


Conditions
----------
* Boolean functions include
** is_atom, is_integer, is_tuple, is_pid, etc
* Logical operators include
** ‘and’, ‘or’, ‘not’, ‘xor’, ‘andthen’, ‘orelse’
* Guard functions include
** abs, element, hd, tl, length, ‘-’, ‘>=’, etc
* All work as in corresponding guard
* In case of bad arguments, the conditions fail
** The process does not crash

[NOTE.speaker]
[role="speaker"]
--
Conditions are basically a guard
Operators are reserved words so they must be given as atoms!
--


Conditions
----------
[role="left"]
....
[{[‘$1’,’$2’],
  [{‘and’,
    {‘orelse’,
     {‘=:=’,’$1’,{const,enable}},
     {‘=:=’,’$2’,{const,enable}}},
    {‘=:=’,{element,1,’$2’},
           {{slot,1,3}}}
   }],
  []}]


[{[enable,{{slot,1,3},’_’}],
  [], []},
 {[disable,{{slot,1,3},’_’}],
  [],
  []}]
....

[role="right"]
* Will match when
** The first argument is the atom enable or disable
** The second argument is the tuple {slot,1,3}
* Both match specifications yield the same result
** The second example can only take tuples of size 2
** +board:action(enable,{{slot,1,3}, disabled})+


Body
----
* If the match and conditions are successful then actions can be executed
** sending messages
** printing terms to stdout
** enabling and disabling trace
** returning trace information
* Can include conditional expressions
* Must always be tuples, even without arguments
* Same rules as in conditions apply to variables and literals


Body
----
++++
<div class="left">
<div class="pre">[{[enable,{{slot,1,3},’_’}],
  [],
  [{<b>enable_trace,procss</b>}]
 },
 {disable,{{slot,1,3},’_’}],
  [],
  [{<b>disable_trace,procs</b>}]
 }
]






</div></div>
++++

[role="right"]
* If the first match specification is successful
** Will add the procs flag to the list of trace flags
* If the second match specification is successful
** Will remove the procs flag from the list of trace flags


Body
----
[role="centered"]
....
{enable_trace, TraceFlag}
{disable_trace, TraceFlag}
....

* enable_trace enables tracing
** Like the erlang:trace(self(), true, [TraceFlag]) call
** {enable_trace, Pid, TraceFlag} enables the flag on another process
* disable_trace disables tracing
** Can be used on the process running it or on other processes
** {disable_trace, Pid, TraceFlag}
* Can only be used in match bodies


Body
----
[role="centered"]
....
{process_dump}
{message, Arg}
....

* process_dump returns textual information on the process
** The information is formatted as a string in a binary
* message appends the Arg to the trace message sent
** Arg can any valid data type or the return value of an action
** {message, false} disables trace messages for this call
** {message, true} sends a regular trace message.


Body
----
[role="centered"]
....
{return_trace}
{silent, true|false}
....

* return_trace causes a trace message to be sent upon the return of this function
** If the function is tail recursive, this property is lost
* silent turns on or off trace messages for that process
** Useful if we are only interested in side effects

[NOTE.speaker]
[role="speaker"]
--
A tail recursive function doesn’t return
tail calls?
--


Body
----
[role="centered"]
....
{display,Term}
{caller}
....

* display displays a single term on stdout
** Should only be used for debugging processes
* caller returns the calling function
** The format is {Module, Function, Arity}
** Returns undefined if the function can not be determined


Literal Funs
------------
++++
<div class="left">
<p class="darkred bold" style="text-align:center;">Match specification</p>
<div class="pre">[{[{‘$1’,’$2’},[‘$1’,’$2’|’_’]],
  [],
  []}]

[{[‘$1’,’$2’],
  [{‘and’,{‘>=’,’$0’,0},
          {‘=<‘,’$2’,10}}],
  []}]

[{[enable,{{slot,1,3},’_’}],
  [],
  [{enable_trace,procs}]}]
</div></div>

<div class="right">
<p class="darkred bold" style="text-align:center;">Literal fun</p>
<div class="pre">fun([{X,Y},[X,Y|_]]) ->
    return_trace()
end


fun([X,Y]) when X>=0, Y=<10 ->
    return_trace()
end


fun([enable,{{slot,1,3},_}])->
    enable_trace(procs)
end
</div></div>
++++


Literal Funs
------------
[role="centered"]
....
dbg:fun2ms(LiteralFun)
....

* Translates a literal fun into a match specification
* Fun cannot be passed as a variable
** It must be declared in the call to fun2ms
* Fun must only take one parameter (the argument list)
** It can be a variable, or a list of variables or patterns to match
* You must include the header file
-include_lib(“stdlib/include/ms_transform.hrl”).

