Basic Erlang
============
:revealjs_theme: esl
:revealjs_slideNumber: true
:revealjs_history: true
:revealjs_transition: linear
:revealjs_center: false
Erlang Solutions Ltd.
© 1999–2015 Erlang Solutions Ltd.

++++
<link rel="stylesheet" type="text/css" href="svg.css"></link>
<script type="text/javascript" src="snap.svg-min.js"></script>
++++

Overview: *basic Erlang I*
--------------------------

* Basic Erlang I
[role="incremental"]
** Data Types
** Variables
** Complex Data Structures
** Pattern Matching
* Basic Erlang II


Data Types: *integers*
----------------------

[role="left"]
....
0
10
100000000
-234
16#AB10F
2#1010
$a
$A
$\n
 
 
 
 
 
....

[role="right"]
* *+B#Val+* is used to store numbers in base *+B+*
* *+$Char+* is used for ascii values
** *+$A+* is equivalent to 65
* Large integers are converted to bignums
* Max size depends on physical constraints:
** RAM
** Paging memory


Data Types: *floats*
--------------------
[role="left"]
....
17.368
-56.654
12.34E-10
 
 
 
....

[role="right"]
* Not efficiently implemented
* Stored as a double
** 64-bit representation
* Follows the IEEE 754 standard


Data Types: *atoms*
-------------------
[role="left"]
....
january
fooBar
alfa21
start_with_lower_case
node@ramone
true
false

'January'
'a space'
'Anything inside quotes{}#@ \n\012'
'node@ramone.erlang.org'
 
....

[role="right"]
* Atoms are constant literals
* Start with a lower case letter or are encapsulated by ' '
* Any character code is allowed within an atom if using ' '
* Letters, integers and _ are allowed if the atom starts with a lower case letter


Data Types: *booleans*
----------------------
[role="left"]
....
true
false
1 == 2
1 /= 2
1 == 1.0
1 =:= 1
1 =/= 1.0
1 < 2
a > z
less < more
is_boolean(9+6)
is_boolean(true)
not((1 < 3) and (2 == 2))
not((1 < 3) or (2 == 2))
not((1 < 3) xor (2 == 2))
 
....

[role="right"]
* No separate type for booleans: atoms *true* and *false* are used instead.
* Operators (and, andalso, or, orelse, xor, not) accept *true* and *false* as if they actually were boolean types.


Data Types: *tuples*
--------------------
[role="left"]
....
{123, bcd}
{123, def, abc}
{abc, {def, 123}, ghi}
{}
{person, 'Joe', 'Armstrong'}
{person, 'Mike', 'Williams'}
 
....

[role="right"]
* Tuples are used to denote data-types with a fixed number of items
* Tuples of any size are allowed
* Contain valid Erlang expressions


Data Types: *lists*
-------------------
..................................
 
[1, 2, 3, 4, 5, 6, 7, eight, nine]
 
..................................

* Lists are written beginning with a *[* and ending with a *]*
* Elements are separated by commas
* Used to store a variable number of items
* Lists are dynamically sized
* Strings in Erlang are lists of ASCII values


Data Types: *lists*
-------------------
..........................................
[january, february, march]
[123, def, abc]
[a,[b,[c,d,e],f],g]
[]
[{person, 'Joe', 'Armstrong'},
 {person, 'Robert', 'Virding'},
 {person, 'Mike', 'Williams'}]
[72,101,108,108,111,32,87,111,114,108,100]
[$H,$e,$l,$l,$o,$ ,$W,$o,$r,$l,$d]
"Hello World"
 
 
 
 
 
 
 
 
 
..........................................


Data Types: *lists*
-------------------

++++
<div class="left">
<div class="pre" style="text-align:center;">
<svg id="data_types_lists_1" style="width:460px; height:210px;" viewBox="0 0 460 210" preserveAspectRatio="xMinYMin meet">
<script>

var s1 = Snap("#data_types_lists_1");

var arrow = s1.polygon([-2,0, -5,5, 5,0, -5,-5]).transform('r0').addClass("darkred");
var marker = arrow.marker(-6, -6, 12, 12).attr({"markerWidth":"6"});

s1.text(10,130,"List              List").addClass("code darkred bold");
s1.text(10,130,"     = [Element |      or").addClass("code");
s1.text(10,170,"       []").addClass("code");
s1.path("M355,90 S220,-70 50,90").attr({"marker-end":marker, "stroke-width":"3.5"}).addClass("line_darkred");

</script>
</svg>
</div></div>
++++

[role="right"]
* A recursive list definition consists of a head and a tail
* Lists whose last tail term is *[]* are called:
** *proper* lists or
** *well-formed* lists
* The tail can be any valid Erlang data type
* Most Erlang programs manipulate proper lists


Data Types: *lists*
-------------------
.............................
[one, two, three, four]
[one, two, three, four | []]
[one, two|[three, four]]
[one, two|[three|[four|[]]]]
[one|[two|[three|[four|[]]]]]
 
 
 
 
 
 
 
 
 
 
 
 
 
 
.............................


Variables
---------
[role="left"]
....
A_long_variable_name
Flag
Name2
DbgFlag


_a_do_not_care_variable
_
 
....

[role="right"]
* Variables can start with an uppercase letter or _
* They may not contain any `funny characters'
* _ alone is a don't care variable
** Its values are ignored and never bound


Variables
---------
[role="left"]
image:images/variables-warning.png["Variables can only be bound once",height=400]

[role="right"]
* Variables are used to store values of data structures
* The value of a variable can not be changed once it has been bound
* There is no need to declare them. Just use them!
* Erlang does not have a static type system
* Types are determined at run time


Complex Data Structures
-----------------------
.......................................
[{{person, "Joe", "Armstrong"},
  [{telephone_number, [3,5,9,7]},
   {shoe_size, 42},
   {pets, [{cat, tubby}, {cat, tiger}]},
   {children, [{thomas, 5}, {claire, 1}]}]
 },
 {{person, "Mike", "Williams"},
  [{shoe_size, 41},
   {likes, [boats, beer]}]
 }
].
 
 
 
 
 
 
 
 
.......................................


Complex Data Structures
-----------------------
* Arbitrary complex data structures can be created by nesting other data structures
* Data structures may contain bound variables
* Data structures are created by writing them down
* No explicit memory allocation or deallocation is needed
** Allocated automatically
** Deallocated by the *garbage collector* when no longer referenced.


Pattern Matching
----------------
[role="centered redcode"]
....
Pattern = Expression
....

* Pattern matching is used for:
** Assigning values to variables
** Controlling the execution flow of programs (if, case, function heads)
** Extracting values from compound data types
** The pattern can contain variables which are bound when the matching succeeds
* The expression may not contain unbound variables


Pattern Matching: *assigning*
-----------------------------
*A = 10* + 
{nbsp}{nbsp} Succeeds, binds *A* to *10*

*{B, C, D} = {10, foo, bar}* + 
{nbsp}{nbsp} Succeeds, binds *B* to *10*, *C* to *foo* and *D* to *bar*.

*{E, E, foo} = {abc, abc, foo}* +
{nbsp}{nbsp} Succeeds, binds *E* to *abc*.

*[H|T] = [1,2,3]* +
{nbsp}{nbsp} Succeeds, binds *H* to *1*, *T* to *[2,3]*.


Pattern Matching: *controlling*
-------------------------------
*A match must either succeed or fail* + 
*+{A, A, B} = {abc, def, 123}+* + 
{nbsp}{nbsp}- fails

*+[A,B,C,D] = [1,2,3]+* + 
{nbsp}{nbsp}- fails

*+[A,B|C] = [1,2,3,4,5,6,7]+* + 
{nbsp}{nbsp}- succeeds, +A=1+, +B=2+, +C=[3,4,5,6,7]+

*+[H|T] = []+* + 
{nbsp}{nbsp}- fails


Pattern Matching: *extracting*
------------------------------
*+\{A, \_, [B|_], \{B\}\} = \{abc, 23, [22, x], \{22\}\}+* + 
{nbsp}{nbsp}- Succeeds, +A=abc+, +B=22+

*+C = 10, {C, C, 13, D, _} = {10, 10, 13, 12, 15}+* + 
{nbsp}{nbsp}- Succeeds, +D=12+, +C=10+

*+Var = {person, \'Francesco', \'Cesarini'},  + 
{person, Name, Surname} = Var+* + 
{nbsp}{nbsp}- Succeeds, +Name=\'Francesco'+, +Surname=\'Cesarini'+

*+[Element|Tail] = [1,2,3,4]+* +
{nbsp}{nbsp}- Succeeds, +Element=1+, +Tail=[2,3,4]+


Summary: *basic Erlang I*
-------------------------
* Basic Erlang I
** Data Types
** Variables
** Complex Data Structures
** Pattern Matching
* Basic Erlang II


Overview: *basic Erlang II*
---------------------------
* Basic Erlang I
* Basic Erlang II
** Function Calls
** Modules


Functions: *calls*
------------------

[role="centered"]
....
 
module:function(Arg1, Arg2, ..., ArgN)
function(Arg1, Arg2, ..., ArgN)
 
....

* Erlang programs consist of functions that call each other
* Functions are defined within modules
* Function names and module names must be atoms
* The *arity* of a function is its number of arguments.


Functions: *syntax*
-------------------

....
circumference(R) ->
    2 * math:pi() * R.


product(X, Y) -> X * Y.

product(X, Y, Z) -> X * Y * Z.

 
 
 
 
 
 
 
 
 
 
   
....


Functions: *syntax*
-------------------

++++
<svg id="functions_syntax_1" style="width:1000px; height:550px;" viewBox="0 0 1000 550" preserveAspectRatio="xMinYMin meet">
<script>

var s2 = Snap("#functions_syntax_1");

var arrow = s2.polygon([-2,0, -5,5, 5,0, -5,-5]).transform('r0').addClass("darkred");
var marker = arrow.marker(-6, -6, 12, 12).attr({"markerWidth":"6"});

s2.text(250,140,"area({square, Side}) ->").addClass("code");
s2.text(250,185,"    Side * Side;").addClass("code");
s2.text(250,230,"area({circle, Radius}) ->").addClass("code");
s2.text(250,275,"    3.1416 * Radius * Radius;").addClass("code");
s2.text(250,320,"area({triangle, A, B, C}) ->").addClass("code");
s2.text(250,365,"    S = (A + B + C) / 2,").addClass("code");
s2.text(250,410,"    math:sqrt(S*(S-A)*(S-B)*(S-C)).").addClass("code");

var s2_g1_1 = s2.text(10,290,"function").addClass("darkred");
var s2_g1_2 = s2.text(15,325,"clauses").addClass("darkred");
var s2_g1_3 = s2.path("M130 300 l110 -115").attr({"marker-end":marker}).addClass("line_darkred");
var s2_g1_4 = s2.path("M130 300 l110 -30").attr({"marker-end":marker}).addClass("line_darkred");
var s2_g1_5 = s2.path("M130 300 l110 60").attr({"marker-end":marker}).addClass("line_darkred");

var s2_g2_1 = s2.text(650,100,"clause separator").addClass("darkred");
var s2_g2_2 = s2.circle(520,178,15).addClass("line_darkred");;
var s2_g2_3 = s2.circle(747,268,15).addClass("line_darkred");;
var s2_g2_4 = s2.path("M760 110 l-214 60").attr({"marker-end":marker}).addClass("line_darkred");
var s2_g2_5 = s2.path("M760 110 l-10 132").attr({"marker-end":marker}).addClass("line_darkred");

var s2_g3_1 = s2.text(390,480,"function").addClass("darkred");
var s2_g3_2 = s2.text(378,515,"terminator").addClass("darkred");
var s2_g3_3 = s2.path("M520 485 l310 -68").attr({"marker-end":marker}).addClass("line_darkred");
var s2_g3_4 = s2.circle(853,407,15).addClass("line_darkred");

var s2_g4_1 = s2.text(60,50,"clause head").addClass("darkred");
var s2_g4_2 = s2.path("M155 60 l85 55").attr({"marker-end":marker}).addClass("line_darkred");

var s2_g5_1 = s2.text(830,265,"clause body").addClass("darkred");
var s2_g5_2 = s2.path("M835 273 l-12 48").attr({"marker-end":marker}).addClass("line_darkred");
var s2_g5_3 = s2.rect(307,332,557,93,18).addClass("line_darkred").attr({"stroke-dasharray":"8,6"});;

var s2_g6_1 = s2.text(830,480,"expression").addClass("darkred");
var s2_g6_2 = s2.text(840,515,"separator").addClass("darkred");
var s2_g6_3 = s2.path("M865 455 l-182 -82").attr({"marker-end":marker}).addClass("line_darkred");
var s2_g6_4 = s2.circle(660,364,15).addClass("line_darkred");

var s2_g1 = s2.g(s2_g1_1, s2_g1_2, s2_g1_3, s2_g1_4, s2_g1_5).addClass("hide");
var s2_g2 = s2.g(s2_g2_1, s2_g2_2, s2_g2_3, s2_g2_4, s2_g2_5).addClass("hide");
var s2_g3 = s2.g(s2_g3_1, s2_g3_2, s2_g3_3, s2_g3_4).addClass("hide");
var s2_g4 = s2.g(s2_g4_1, s2_g4_2).addClass("hide");
var s2_g5 = s2.g(s2_g5_1, s2_g5_2, s2_g5_3).addClass("hide");
var s2_g6 = s2.g(s2_g6_1, s2_g6_2, s2_g6_3, s2_g6_4).addClass("hide");

var s2_counter=1
s2.click( function() {
  switch(s2_counter) {
    case 1: {s2_g1.animate({"opacity":"1"}, 250, mina.linear); s2_counter++; break};
    case 2: {s2_g2.animate({"opacity":"1"}, 250, mina.linear); s2_g1.animate({"opacity":"0"}, 250, mina.linear); s2_counter++; break};
    case 3: {s2_g3.animate({"opacity":"1"}, 250, mina.linear); s2_g2.animate({"opacity":"0"}, 250, mina.linear); s2_counter++; break};
    case 4: {s2_g4.animate({"opacity":"1"}, 250, mina.linear); s2_g3.animate({"opacity":"0"}, 250, mina.linear); s2_counter++; break};
    case 5: {s2_g5.animate({"opacity":"1"}, 250, mina.linear); s2_g4.animate({"opacity":"0"}, 250, mina.linear); s2_counter++; break};
    case 6: {s2_g6.animate({"opacity":"1"}, 250, mina.linear); s2_g5.animate({"opacity":"0"}, 250, mina.linear); s2_counter++; break};
    case 7: {s2_g6.animate({"opacity":"0"}, 250, mina.linear); s2_counter++; break};
    }
} );

</script>
</svg>
++++


Functions: *syntax*
-------------------

++++
<div class="left" style="width:560px;">
  <div class="pre"><span class="redcode">Func(Pattern1, Pattern2, ...) -></span>
   &lt;expression 1&gt;,
   &lt;expression 2&gt;,
   ...
   &lt;expression n&gt;;
<span class="redcode">Func(Pattern1, Pattern2, ...) -></span>
   &lt;expression 1&gt;,
   &lt;expression 2&gt;,
   ...
   &lt;expression n&gt;;
...
<span class="redcode">Func(Pattern1, Pattern2, ...) -></span>
   &lt;expression 1&gt;,
   &lt;expression 2&gt;,
   ...
   &lt;expression n&gt;.
</div></div>
++++

[role="right"]
* A function is defined as a collection of clauses
* Variables are pattern matched in the function clause head
* If pattern matching fails on a clause, the next one is tested
* The first clause matched is used
* The last expression executed in the clause body is returned
 

Functions: *examples*
---------------------
[role="left w_600"]
....
factorial(0) -> 1;
factorial(N) ->
    N * factorial(N-1).


> factorial(3).
   (matches N = 3 in clause 2)
   == 3 * factorial(3-1)
   (matches clause 2)
   == 3 * 2 * factorial(2-1)
   (matches clause 2)
   == 3 * 2 * 1 * factorial(1-1)
   (matches clause 1)
   == 3 * 2 * 1 * 1
   == 6
 
....

[role="right"]
* Pattern matching occurs in the function head
** Unbound variables get bound after a successful pattern match
* Variables are local to each clause
* Variables are allocated and deallocated automatically

Modules
-------

++++
<svg id="modules_1" style="width:1000px; height:600px; margin-top:-30px;" viewBox="0 0 1000 600" preserveAspectRatio="xMinYMin meet">
<script>

var s3 = Snap("#modules_1");

var arrow = s3.polygon([-2,0, -5,5, 5,0, -5,-5]).transform('r0').addClass("darkred");
var marker = arrow.marker(-6, -6, 12, 12).attr({"markerWidth":"6"});

s3.text(250,130,"-module(demo).").addClass("code");
s3.text(250,174,"-export([double/1]).").addClass("code");
s3.text(250,218," ").addClass("code");
s3.text(250,262,"% This is a comment.").addClass("code");
s3.text(250,306,"% Everything after '%' is ignored.").addClass("code");
s3.text(250,350," ").addClass("code");
s3.text(250,394,"double(X) ->").addClass("code");
s3.text(250,438,"    times(X, 2).").addClass("code");
s3.text(250,482," ").addClass("code");
s3.text(250,526,"times(X, N) ->").addClass("code");
s3.text(250,570,"    X * N.").addClass("code");

// module_directives
var s3_g1_1 = s3.text(20,110,"module").addClass("darkred");
var s3_g1_2 = s3.text(10,145,"directives").addClass("darkred");
var s3_g1_3 = s3.path("M150 116 l80 3").attr({"marker-end":marker}).addClass("line_darkred");
var s3_g1_4 = s3.path("M150 116 l80 45").attr({"marker-end":marker}).addClass("line_darkred");

// module_name
var s3_g2_1 = s3.text(550,30,"module").addClass("darkred");
var s3_g2_2 = s3.text(562,65,"name").addClass("darkred");
var s3_g2_3 = s3.path("M550 45 l-92 53").attr({"marker-end":marker}).addClass("line_darkred");
var s3_g2_4 = s3.ellipse(424,120,40,21).addClass("line_darkred");

// exported_functions
var s3_g3_1 = s3.text(12,310,"exported").addClass("darkred");
var s3_g3_2 = s3.text(10,345,"functions").addClass("darkred");
var s3_g3_3 = s3.path("M115 280 l285 -93").attr({"marker-end":marker}).addClass("line_darkred");
var s3_g3_4 = s3.ellipse(474,164,87,26).addClass("line_darkred");

// arity
var s3_g4_1 = s3.text(720,230,"arity").addClass("darkred");
var s3_g4_2 = s3.path("M710 223 l-140 -40").attr({"marker-end":marker}).addClass("line_darkred");
var s3_g4_3 = s3.ellipse(540,165,26,24).addClass("line_darkred");

// functions
var s3_g5_1 = s3.text(692,490,"functions").addClass("darkred");
var s3_g5_2 = s3.path("M680 480 l-140 -60").attr({"marker-end":marker}).addClass("line_darkred");
var s3_g5_3 = s3.path("M680 480 l-150 30").attr({"marker-end":marker}).addClass("line_darkred");

// groups
var s3_g1 = s3.g(s3_g1_1, s3_g1_2, s3_g1_3, s3_g1_4).addClass("hide");
var s3_g2 = s3.g(s3_g2_1, s3_g2_2, s3_g2_3, s3_g2_4).addClass("hide");
var s3_g3 = s3.g(s3_g3_1, s3_g3_2, s3_g3_3, s3_g3_4).addClass("hide");
var s3_g4 = s3.g(s3_g4_1, s3_g4_2, s3_g4_3).addClass("hide");
var s3_g5 = s3.g(s3_g5_1, s3_g5_2, s3_g5_3).addClass("hide");

var s3_counter=1
s3.click( function() {
  switch(s3_counter) {
    case 1: {s3_g1.animate({"opacity":"1"}, 250, mina.linear); s3_counter++; break};
    case 2: {s3_g2.animate({"opacity":"1"}, 250, mina.linear); s3_g1.animate({"opacity":"0"}, 250, mina.linear); s3_counter++; break};
    case 3: {s3_g3.animate({"opacity":"1"}, 250, mina.linear); s3_g2.animate({"opacity":"0"}, 250, mina.linear); s3_counter++; break};
    case 4: {s3_g4.animate({"opacity":"1"}, 250, mina.linear); s3_g3.animate({"opacity":"0"}, 250, mina.linear); s3_counter++; break};
    case 5: {s3_g5.animate({"opacity":"1"}, 250, mina.linear); s3_g4.animate({"opacity":"0"}, 250, mina.linear); s3_counter++; break};
    case 6: {s3_g5.animate({"opacity":"0"}, 250, mina.linear); s3_counter++; break};
    }
} );

</script>
</svg>
++++

Modules
-------
* Modules are stored in files with the *.erl* suffix
* The module and file names must be the same
** You store the module *demo* in *demo.erl*
* Modules are named with the *-module(Name).* directive
* Exported functions can be called from outside the module


Modules
-------
* Use +-export([Function/Arity, Function/Arity, ...])+
* Local functions may only be called within the module
* Prefix function calls with the module name when making a call from outside the module
** +Module:Fun(Arg1, ...)+
** This is a fully *qualified call*


Summary: *basic Erlang II*
--------------------------
* Basic Erlang I
* Basic Erlang II
** Function Calls
** Modules
