Behaviours
==========
:revealjs_theme: esl
:revealjs_slideNumber: true
:revealjs_history: true
:revealjs_transition: linear
:revealjs_center: false
Erlang Solutions Ltd.
© 1999–2015 Erlang Solutions Ltd.

++++
<link rel="stylesheet" type="text/css" href="../../styles/svg.css"></link>
<script type="text/javascript" src="../../tools/snap.svg/snap.svg-min.js"></script>
++++


Behaviours
----------
* Design Patterns
* Behaviours
* A Server Example


Design Patterns
---------------
* OTP Behaviours are a formalisation of design patterns
* Processes share similar structures and life cycles
** They are started
** They receive messages and send replies
** They are terminated (or crash)
* Even if they perform different tasks, they will perform them following a set of patterns
* Each design pattern solves a specific problem

[NOTE.speaker]
[role="speaker"]
--
Erlang doesn't have strict design patterns, but they're similar and have instead been implemented directly in the language. They are, according to 'design pattern' speech, implementation libraries of design patterns

Stress 'similar structures', because that's what the pattern is.
--


More on Processes: *process skeleton*
-------------------------------------
++++
<svg id="process_skeleton" style="width:1020px; height:620px;" viewBox="0 0 1020 620" preserveAspectRatio="xMinYMin meet">
<style type="text/css">
    .text {fill:#fff; font-size:20pt;}
    .grey {fill:#959595;}
    .code {font-size: 20pt;}
</style>
<script>

var s1 = Snap("#process_skeleton");

var arrow = s1.polygon([0,0, 4,2, 0,4]).attr({"fill":"#000"}).transform('r0').addClass("darkred");
var marker = arrow.marker(0,0, 4,4, 3,2);

s1.rect(10,35,965,580).addClass("rect_code");

s1.ellipse(900,50,80,35).addClass("shape darkred");
s1.text(870,60,"Start").addClass("text");

s1.rect(820,140,160,80).addClass("shape grey");
s1.text(845,190,"Initialise").addClass("text");

s1.ellipse(650,280,80,35).addClass("shape darkred");
s1.text(625,290,"Stop").addClass("text");

s1.rect(850,265,100,100,20,20).addClass("shape").attr({"fill":"#E1E1E1"});
s1.text(870,325,"loop");

s1.rect(820,410,160,80).addClass("shape grey");
s1.text(838,460,"terminate").addClass("text");

s1.path("M900,85 l0,57").attr({"marker-end":marker}).addClass("line_darkred");
s1.path("M900,220 l0,47").attr({"marker-end":marker}).addClass("line_darkred");
s1.path("M950,300 C1020,250 1020,380 953,330").attr({"marker-end":marker}).addClass("line_darkred");
s1.path("M730,280 l120,35").attr({"marker-end":marker}).addClass("line_darkred");
s1.path("M900,365 l0,47").attr({"marker-end":marker}).addClass("line_darkred");

s1.text(20,70,"start(Args) -> spawn(server, init, [Args])").addClass("code");
s1.text(20,108,"").addClass("code");
s1.text(20,146,"init(Args) ->").addClass("code");
s1.text(20,184,"  State = initialize_state(Args),").addClass("code");
s1.text(20,222,"  loop(State).").addClass("code");
s1.text(20,260,"").addClass("code");
s1.text(20,298,"loop(State) ->").addClass("code");
s1.text(20,336,"   receive").addClass("code");
s1.text(20,374,"      {handle, Msg} -> ").addClass("code");
s1.text(20,412,"         NewState = handle(Msg, State),").addClass("code");
s1.text(20,450,"         loop(NewState);").addClass("code");
s1.text(20,488,"      stop -> terminate(State)").addClass("code");
s1.text(20,526,"   end.").addClass("code");
s1.text(20,564,"").addClass("code");
s1.text(20,602,"terminate(State) -> clean_up(State).").addClass("code");

</script>
</svg>
++++


[NOTE.speaker]
[role="speaker"]
--
The pattern behind all the patterns.
It's so common even the functions get the same name in nearly any module.
Likely used even in code not written with OTP.

In the terminate, you clean up resources: files, databases, etc. while init is the opposite.
--


Design Patterns
---------------

++++
<div class="centre">
<svg id="design_patterns" style="width:600; height:460px;" viewBox="0 0 600 460" preserveAspectRatio="xMinYMin meet">
<script>

var s2 = Snap("#design_patterns");

var arrow = s2.polygon([-2,0, -5,5, 5,0, -5,-5]).transform('r0');
var marker = arrow.marker(-6, -6, 12, 12).attr({"markerWidth":"6"});

s2.text(42,30,"Clients").addClass("code darkred bold");
s2.circle(100,110,40).addClass("shape grey");
s2.circle(100,250,40).addClass("shape grey");
s2.circle(100,390,40).addClass("shape grey");

s2.path("M200,25 l0,400").attr({"stroke-dasharray":"4,8"}).addClass("line");

s2.text(450,30,"Server").addClass("code darkred bold");
s2.circle(500,110,40).addClass("shape darkred");

s2_g1 = s2.g(s2.text(220,80,"request").addClass("code darkred"),
             s2.path("M155,90 l280,0").attr({"marker-end":marker}).addClass("line"))
            .addClass("hide")
s2_g2 = s2.g(s2.text(235,145,"reply").addClass("code darkred"),
             s2.path("M440,115 l-280,0").attr({"marker-end":marker}).addClass("line"))
            .addClass("hide")

s2_g3 = s2.g(s2.text(220,240,"request").addClass("code darkred").transform("rotate(-37,275,205)"),
             s2.path("M150,355 L440,140").attr({"marker-end":marker}).addClass("line"))
            .addClass("hide");
s2_g4 = s2.g(s2.text(270,305,"reply").addClass("code darkred").transform("rotate(-37,305,270)"),
             s2.path("M460,160 L160,385").attr({"marker-end":marker}).addClass("line"))
            .addClass("hide");

s2_anim1 = function() { s2_g1.animate({"opacity":"1"}, 500, mina.linear, s2_anim2); }
s2_anim2 = function() { s2_g2.animate({"opacity":"1"}, 500, mina.linear, s2_anim3); }
s2_anim3 = function() { s2_g3.animate({"opacity":"1"}, 500, mina.linear, s2_anim4); }
s2_anim4 = function() { s2_g4.animate({"opacity":"1"}, 500, mina.linear); }
s2.click(function() { s2_anim1() });

</script>
</svg>
</div>
++++

* Take a Client-Server architecture
* What behaviours will differ between systems?
* What similarities will there be between systems?

[NOTE.speaker]
[role="speaker"]
--
mention that this is erlang, the server is a process, the client is a process, communication is message passing
--


Design Patterns
---------------
{empty} + 
{empty} + 

[role="left comparison green"]
Generic::
* Spawning the server
* Storing the loop data
* Sending requests to the server
* Sending replies to the client
* Receiving server replies
* Stopping the server

[role="right comparison red"]
Specific::
* Initialising the server state
* The loop data
* The client requests
* Handling client requests
* Contents of server reply
* Cleaning up

[NOTE.speaker]
[role="speaker"]
--
Go through every single one of these and compare them one to each other.
--


Behaviours
----------
image::images/behaviours_1.png[Behaviours, auto, auto]
{empty}  +  

* The idea is to split the code in two parts
* The generic part is called the *generic behaviour*
** They are provided by OTP as library modules
* The specific part is called the *callback module*
** They are implemented by the programmer

[NOTE.speaker]
[role="speaker"]
--
Behaviours split generic and specific in two separate modules: one for generics and one for specifics. The generics are in the driving seat. The specifics know nothing of the generics.
--

Behaviours
----------
*Generic Servers*::
Used to model client-server behaviours

*Generic Finite-State Machines*::
Used for finite-state machine programming

*Generic Event Handler/Manager*::
Used for writing event handlers

*Supervisors*::
Used for fault-tolerant supervision trees

*Application*::
Used to encapsulate resources and functionality

[NOTE.speaker]
[role="speaker"]
--
Mention and give examples for FSM for protocols, or event handlers having a pub-sub way of communicating
--


Behaviours
----------
[role="left comparison green"]
Pros::
* Less code to develop
* Less bugs
* Solid well tested base
* Free built-in functionality
** Log, Trace, Statistics, Extensible
* Common Programming Style
* Component-based terminology

[role="right comparison red"]
Cons::
* Steep learning curve
* Affects performance

[NOTE.speaker]
[role="speaker"]
--
Pros: Less bugs and Less code need to be emphasized. Then equally important is sharing a common programming style when programming in the large. You read code more than you write it.

Cons: The steep learning curve is not that steep if you attend the course.
-About performance: always start with the behaviours, and if the bottleneck really is there, you optimize. Rarely needed.
--


A server Example
----------------
++++
<div class="centre">
<svg id="server_example_1" style="width:720; height:460px;" viewBox="0 0 720 460" preserveAspectRatio="xMinYMin meet">
<script>

var s3 = Snap("#server_example_1");

var arrow = s3.polygon([-2,0, -5,5, 5,0, -5,-5]).transform('r0');
var marker = arrow.marker(-6, -6, 12, 12).attr({"markerWidth":"6"});

s3.text(42,30,"Clients").addClass("code darkred bold");
s3.image("images/phone1.png",60,50,210/2,229/2);
s3.image("images/phone2.png",50,200,201/2,201/2);
s3.image("images/phone3.png",40,315,240/2,246/2).transform("r-60");

s3.path("M200,45 l0,400").attr({"stroke-dasharray":"4,8"}).addClass("line");

s3.text(500,30,"Server").addClass("code darkred bold");
s3.circle(550,130,40).addClass("shape darkred");
s3.image("images/server.png",610,95,175/1.75,133/1.75);

s3_g1 = s3.g(s3.text(250,110,"allocate").addClass("code darkred"),
             s3.path("M155,120 l330,0").attr({"marker-end":marker}).addClass("line"))
            .addClass("hide");
s3_g2 = s3.g(s3.text(205,175,"{ok, Frequency}").addClass("code darkred"),
             s3.path("M490,145 l-330,0").attr({"marker-end":marker}).addClass("line"))
            .addClass("hide");

s3_g3 = s3.g(s3.text(110,268,"{deallocate, Freq}").addClass("code darkred").transform("rotate(-32,305,235)"),
             s3.path("M150,385 L490,170").attr({"marker-end":marker}).addClass("line"))
            .addClass("hide");
s3_g4 = s3.g(s3.text(310,350,"ok").addClass("code darkred").transform("rotate(-37,305,300)"),
             s3.path("M510,190 L170,405").attr({"marker-end":marker}).addClass("line"))
            .addClass("hide");

s3_anim1 = function() { s3_g1.animate({"opacity":"1"}, 500, mina.linear, s3_anim2); }
s3_anim2 = function() { s3_g2.animate({"opacity":"1"}, 500, mina.linear, s3_anim3); }
s3_anim3 = function() { s3_g3.animate({"opacity":"1"}, 500, mina.linear, s3_anim4); }
s3_anim4 = function() { s3_g4.animate({"opacity":"1"}, 500, mina.linear); }
s3.click(function() { s3_anim1() });

</script>
</svg>
</div>
++++

* The following server is responsible for allocating and deallocating frequencies on behalf of mobile phones

[NOTE.speaker]
[role="speaker"]
--
This is a *simplified* example
--


A Server Example
----------------
++++
<svg id="server_example_2" style="width:1070px; height:570px;" viewBox="0 0 1070 570" preserveAspectRatio="xMinYMin meet">
<script>

var s4 = Snap("#server_example_2");

var arrow = s4.polygon([-2,0, -5,5, 5,0, -5,-5]).transform('r0');
var marker = arrow.marker(-6, -6, 12, 12).attr({"markerWidth":"6"});

var arrow_red = s4.polygon([-2,0, -5,5, 5,0, -5,-5]).transform('r0');
var marker_red = arrow_red.marker(-6, -6, 12, 12).attr({"markerWidth":"6"}).addClass("darkred");

s4.text(20,80,"Client");
s4.path("M60,100 l0,440").attr({"marker-end":marker}).addClass("line").attr({"stroke-width":"5px"});

s4.text(955,80,"Server").addClass("darkred");
s4.path("M1000,100 l0,440").attr({"marker-end":marker_red}).addClass("line_darkred").attr({"stroke-width":"5px"});

s4_g1 = s4.text(150,150,"{request, Pid, allocate}").addClass("code hide");
s4.path("M90,170 l880,0").attr({"marker-end":marker}).addClass("line");
s4_g2 = s4.path("M980,170 l-900,0").addClass("draw").attr({"strokeDasharray":900});

s4_g3 = s4.text(110,230,"{reply,{error,no_frequencies}} or {ok,Frequency}").addClass("code hide");
s4.path("M970,250 l-875,0").attr({"marker-end":marker}).addClass("line");
s4_g4 = s4.path("M80,250 l900,0").addClass("draw").attr({"strokeDasharray":900});

s4_g5 = s4.text(120,360,"{request, Pid, {deallocate, Frequency}}").addClass("code hide");
s4.path("M90,380 l880,0").attr({"marker-end":marker}).addClass("line");
s4_g6 = s4.path("M980,380 l-900,0").addClass("draw").attr({"strokeDasharray":900});

s4_g7 = s4.text(750,440,"{reply, ok}").addClass("code hide");
s4.path("M970,460 l-875,0").attr({"marker-end":marker}).addClass("line");
s4_g8 = s4.path("M80,460 l900,0").addClass("draw").attr({"strokeDasharray":900});

s4_anim1 = function() { s4_g1.animate({"opacity":"1"}, 400, mina.linear, s4_anim2); }
s4_anim2 = function() { s4_g2.animate({"strokeDashoffset":"900"}, 600, mina.linear, s4_anim3); }
s4_anim3 = function() { s4_g3.animate({"opacity":"1"}, 400, mina.linear, s4_anim4); }
s4_anim4 = function() { s4_g4.animate({"strokeDashoffset":"900"}, 600, mina.linear, s4_anim5); }
s4_anim5 = function() { s4_g5.animate({"opacity":"1"}, 400, mina.linear, s4_anim6); }
s4_anim6 = function() { s4_g6.animate({"strokeDashoffset":"900"}, 600, mina.linear, s4_anim7); }
s4_anim7 = function() { s4_g7.animate({"opacity":"1"}, 400, mina.linear, s4_anim8); }
s4_anim8 = function() { s4_g8.animate({"strokeDashoffset":"900"}, 600, mina.linear); }
s4.click(function() { s4_anim1() });

</script>
</svg>
++++

[NOTE.speaker]
[role="speaker"]
--
the 'or' is not a programmable 'or', just a conceptual one, if the question arises.
--


A Server Example
----------------

++++
<svg id="server_example_3" style="width:1000px; height:500px;" viewBox="0 0 1000 500" preserveAspectRatio="xMinYMin meet">
<script>

var s5 = Snap("#server_example_3");

s5.text(10,40,"-module(frequency).").addClass("code");
s5.text(10,80,"-export([start/0, stop/0,  allocate/0, deallocate/1]).").addClass("code");
s5_g1_1 = s5.text(10,80,"         start    stop").addClass("code green bold");
s5.text(10,120,"-export([init/0]).").addClass("code");
s5_g1_2 = s5.text(10,120,"         init").addClass("code green bold");
s5.text(10,160,"").addClass("code");
s5.text(10,200,"start() ->").addClass("code");
s5_g1_3 = s5.text(10,200,"start").addClass("code green bold");
s5.text(10,240,"    register(frequency, spawn(frequency, init, [])).").addClass("code");
s5_g1_4 = s5.text(10,240,"    register            spawn            init").addClass("code green bold");
s5.text(10,280,"").addClass("code");
s5.text(10,320,"init() ->").addClass("code");
s5_g1_5 = s5.text(10,320,"init").addClass("code green bold");
s5.text(10,360,"    Frequencies = {get_frequencies(), []},").addClass("code");
s5.text(10,400,"    loop(Frequencies).").addClass("code");
s5_g1_6 = s5.text(10,400,"    loop").addClass("code green bold");
s5.text(10,440,"").addClass("code");
s5.text(10,480,"get_frequencies() -> [10,11,12,13,14,15].").addClass("code");

s5.text(770,370,"Generic").addClass("green bold").attr({"font-size":"36pt"}).transform("rotate(-24,820,320)");

s5_g1 = s5.g(s5_g1_1, s5_g1_2, s5_g1_3, s5_g1_4, s5_g1_5, s5_g1_6).addClass("hide");

s5.click(function() { s5_g1.animate({"opacity":"1"}, 400, mina.linear); });

</script>
</svg>
++++

[NOTE.speaker]
[role="speaker"]
--
be meticulous in going through the example, so people who are less familiar with the language have an easier time getting started.

reconnect which what has been generic in the previous slides

The generic stuff is written in red (after animations).
--


A Server Example
----------------
++++
<svg id="server_example_4" style="width:1000px; height:500px;" viewBox="0 0 1000 500" preserveAspectRatio="xMinYMin meet">
<script>

var s6 = Snap("#server_example_4");

s6.text(10,40,"-module(frequency).").addClass("code");
s6_g1_1 = s6.text(10,40,"        frequency").addClass("code darkred bold");
s6.text(10,80,"-export([start/0, stop/0,  allocate/0, deallocate/1]).").addClass("code");
s6_g1_2 = s6.text(10,80,"                           allocate    deallocate").addClass("code darkred bold");
s6.text(10,120,"-export([init/0]).").addClass("code");
s6.text(10,160,"").addClass("code");
s6.text(10,200,"start() ->").addClass("code");
s6.text(10,240,"    register(frequency, spawn(frequency, init, [])).").addClass("code");
s6_g1_3 = s6.text(10,240,"             frequency        frequency        []").addClass("code darkred bold");
s6.text(10,280,"").addClass("code");
s6.text(10,320,"init() ->").addClass("code");
s6.text(10,360,"    Frequencies = {get_frequencies(), []},").addClass("code");
s6_g1_4 = s6.text(10,360,"    Frequencies   {get_frequencies(), []},").addClass("code darkred bold");
s6.text(10,400,"    loop(Frequencies).").addClass("code");
s6_g1_5 = s6.text(10,400,"         Frequencies").addClass("code darkred bold");
s6.text(10,440,"").addClass("code");
s6.text(10,480,"get_frequencies() -> [10,11,12,13,14,15].").addClass("code");
s6_g1_6 = s6.text(10,480,"get_frequencies() -> [10,11,12,13,14,15].").addClass("code darkred bold");

s6.text(770,370,"Specific").addClass("bold darkred").attr({"font-size":"36pt"}).transform("rotate(-24,820,320)");

s6_g1 = s6.g(s6_g1_1, s6_g1_2, s6_g1_3, s6_g1_4, s6_g1_5, s6_g1_6).addClass("hide");

s6.click(function() { s6_g1.animate({"opacity":"1"}, 400, mina.linear); });

</script>
</svg>
++++


A Server Example
----------------
++++
<svg id="server_example_5" style="width:1000px; height:540px;" viewBox="0 0 1000 540" preserveAspectRatio="xMinYMin meet">
<script>

var s7 = Snap("#server_example_5");

s7.text(10,40, "%%  The client Functions").addClass("code")
s7.text(10,80, "stop()           -> call(stop).").addClass("code")
s7_g1_1 = s7.text(10,80, "stop()           -> call(stop).").addClass("code green bold")
s7.text(10,120,"allocate()       -> call(allocate).").addClass("code")
s7_g1_2 = s7.text(10,120,"                    call(        ).").addClass("code green bold")
s7.text(10,160,"deallocate(Freq) -> call({deallocate, Freq}).").addClass("code")
s7_g1_3 = s7.text(10,160,"                    call(                  ).").addClass("code green bold")
s7.text(10,200,"").addClass("code")
s7.text(10,240,"%% We hide all message passing and the message protocol in").addClass("code")
s7.text(10,280,"%% a functional interface.").addClass("code")
s7.text(10,320,"").addClass("code")
s7.text(10,360,"call(Message) ->").addClass("code")
s7_g1_4 = s7.text(10,360,"call(Message) ->").addClass("code green bold")
s7.text(10,400,"    frequency ! {request, self(), Message},").addClass("code")
s7_g1_5 = s7.text(10,400,"              ! {request, self(), Message},").addClass("code green bold")
s7.text(10,440,"    receive ").addClass("code")
s7_g1_6 = s7.text(10,440,"    receive ").addClass("code green bold")
s7.text(10,480,"        {reply, Reply} -> Reply").addClass("code")
s7_g1_7 = s7.text(10,480,"        {reply, Reply} -> Reply").addClass("code green bold")
s7.text(10,520,"    end.").addClass("code")
s7_g1_8 = s7.text(10,520,"    end.").addClass("code green bold")

s7.text(770,370,"Generic").addClass("bold green").attr({"font-size":"36pt"}).transform("rotate(-24,820,320)");

s7_g1 = s7.g(s7_g1_1, s7_g1_2, s7_g1_3, s7_g1_4, s7_g1_5, s7_g1_6, s7_g1_7, s7_g1_8).addClass("hide");

s7.click(function() { s7_g1.animate({"opacity":"1"}, 400, mina.linear); });

</script>
</svg>
++++


A Server Example
----------------
++++
<svg id="server_example_6" style="width:1000px; height:540px;" viewBox="0 0 1000 540" preserveAspectRatio="xMinYMin meet">
<script>

var s8 = Snap("#server_example_6");

s8.text(10,40, "%%  The client Functions").addClass("code");
s8.text(10,80, "stop()           -> call(stop).").addClass("code");
s8.text(10,120,"allocate()       -> call(allocate).").addClass("code");
s8_g1_1 = s8.text(10,120,"allocate()       ->      allocate").addClass("code darkred bold");
s8.text(10,160,"deallocate(Freq) -> call({deallocate, Freq}).").addClass("code");
s8_g1_2 = s8.text(10,160,"deallocate(Freq) ->      {deallocate, Freq}").addClass("code darkred bold");
s8.text(10,200,"").addClass("code");
s8.text(10,240,"%% We hide all message passing and the message protocol in").addClass("code");
s8.text(10,280,"%% a functional interface.").addClass("code");
s8.text(10,320,"").addClass("code");
s8.text(10,360,"call(Message) ->").addClass("code");
s8.text(10,400,"    frequency ! {request, self(), Message},").addClass("code");
s8_g1_3 = s8.text(10,400,"    frequency").addClass("code darkred bold");
s8.text(10,440,"    receive ").addClass("code");
s8.text(10,480,"        {reply, Reply} -> Reply").addClass("code");
s8.text(10,520,"    end.").addClass("code");

s8.text(770,370,"Specific").addClass("bold darkred").attr({"font-size":"36pt"}).transform("rotate(-24,820,320)");

s8_g1 = s8.g(s8_g1_1, s8_g1_2, s8_g1_3).addClass("hide");

s8.click(function() { s8_g1.animate({"opacity":"1"}, 400, mina.linear); });

</script>
</svg>
++++


A Server Example
----------------
++++
<svg id="server_example_7" style="width:1000px; height:540px;" viewBox="0 0 1000 540" preserveAspectRatio="xMinYMin meet">
<script>

var s9 = Snap("#server_example_7");

s9.text(10,40,"loop(Frequencies) ->").addClass("code");
s9.text(10,80,"  receive").addClass("code");
s9.text(10,120,"   {request, Pid, allocate} ->").addClass("code");
s9.text(10,160,"     {NewFrequencies, Reply} = allocate(Frequencies, Pid),").addClass("code");
s9.text(10,200,"     reply(Pid, Reply),").addClass("code");
s9.text(10,240,"     loop(NewFrequencies);").addClass("code");
s9.text(10,280,"   {request, Pid , {deallocate, Freq}} ->").addClass("code");
s9.text(10,320,"      NewFrequencies = deallocate(Frequencies, Freq),").addClass("code");
s9.text(10,360,"      reply(Pid, ok),").addClass("code");
s9.text(10,400,"      loop(NewFrequencies);").addClass("code");
s9.text(10,440,"   {request, Pid, stop} ->").addClass("code");
s9.text(10,480,"      reply(Pid, ok)         reply(Pid, Message) ->").addClass("code");
s9.text(10,520,"  end.                          Pid ! {reply, Message}.").addClass("code");

s9_g1_1 = s9.text(10,40,"loop(           ) ->").addClass("code green bold");
s9_g1_2 = s9.text(10,80,"  receive").addClass("code green bold");
s9_g1_3 = s9.text(10,120,"   {request  Pid,         } ->").addClass("code green bold");
s9_g1_4 = s9.text(10,160,"").addClass("code green bold");
s9_g1_5 = s9.text(10,200,"     reply(Pid,      ),").addClass("code green bold");
s9_g1_6 = s9.text(10,240,"     loop(              );").addClass("code green bold");
s9_g1_7 = s9.text(10,280,"   {request  Pid                     } ->").addClass("code green bold");
s9_g1_8 = s9.text(10,320,"").addClass("code green bold");
s9_g1_9 = s9.text(10,360,"      reply(Pid,   ),").addClass("code green bold");
s9_g1_10 = s9.text(10,400,"      loop(              );").addClass("code green bold");
s9_g1_11 = s9.text(10,440,"   {request, Pid  stop} ->").addClass("code green bold");
s9_g1_12 = s9.text(10,480,"      reply(Pid  ok)         reply(Pid, Message) ->").addClass("code green bold");
s9_g1_13 = s9.text(10,520,"  end.                          Pid ! {reply, Message}.").addClass("code green bold");

s9.text(720,70,"Generic").addClass("bold green").attr({"font-size":"36pt"}).transform("rotate(-24,800,200)");

s9_g1 = s9.g(s9_g1_1, s9_g1_2, s9_g1_3, s9_g1_4, s9_g1_5, s9_g1_6, s9_g1_7, s9_g1_8, s9_g1_9, s9_g1_10, s9_g1_11, s9_g1_12, s9_g1_13).addClass("hide");

s9.click(function() { s9_g1.animate({"opacity":"1"}, 400, mina.linear); });

</script>
</svg>
++++


A Server Example
----------------
++++
<svg id="server_example_8" style="width:1000px; height:540px;" viewBox="0 0 1000 540" preserveAspectRatio="xMinYMin meet">
<script>

var s10 = Snap("#server_example_8");

s10.text(10,40,"loop(Frequencies) ->").addClass("code");
s10.text(10,80,"  receive").addClass("code");
s10.text(10,120,"   {request, Pid, allocate} ->").addClass("code");
s10.text(10,160,"     {NewFrequencies, Reply} = allocate(Frequencies, Pid),").addClass("code");
s10.text(10,200,"     reply(Pid, Reply),").addClass("code");
s10.text(10,240,"     loop(NewFrequencies);").addClass("code");
s10.text(10,280,"   {request, Pid , {deallocate, Freq}} ->").addClass("code");
s10.text(10,320,"      NewFrequencies = deallocate(Frequencies, Freq),").addClass("code");
s10.text(10,360,"      reply(Pid, ok),").addClass("code");
s10.text(10,400,"      loop(NewFrequencies);").addClass("code");
s10.text(10,440,"   {request, Pid, stop} ->").addClass("code");
s10.text(10,480,"      reply(Pid, ok)         reply(Pid, Message) ->").addClass("code");
s10.text(10,520,"  end.                          Pid ! {reply, Message}.").addClass("code");

s10_g1_1 = s10.text(10,40,"     Frequencies").addClass("code darkred bold");
s10_g1_2 = s10.text(10,80,"").addClass("code darkred bold");
s10_g1_3 = s10.text(10,120,"                  allocate").addClass("code darkred bold");
s10_g1_4 = s10.text(10,160,"     {NewFrequencies, Reply} = allocate(Frequencies, Pid)").addClass("code darkred bold");
s10_g1_5 = s10.text(10,200,"                Reply").addClass("code darkred bold");
s10_g1_6 = s10.text(10,240,"          NewFrequencies").addClass("code darkred bold");
s10_g1_7 = s10.text(10,280,"                   {deallocate, Freq}").addClass("code darkred bold");
s10_g1_8 = s10.text(10,320,"      NewFrequencies = deallocate(Frequencies, Freq),").addClass("code darkred bold");
s10_g1_9 = s10.text(10,360,"                 ok").addClass("code darkred bold");
s10_g1_10 = s10.text(10,400,"           NewFrequencies").addClass("code darkred bold");

s10.text(720,70,"Specific").addClass("bold darkred").attr({"font-size":"36pt"}).transform("rotate(-24,800,200)");

s10_g1 = s10.g(s10_g1_1, s10_g1_2, s10_g1_3, s10_g1_4, s10_g1_5, s10_g1_6, s10_g1_7, s10_g1_8, s10_g1_9, s10_g1_10).addClass("hide");

s10.click(function() { s10_g1.animate({"opacity":"1"}, 400, mina.linear); });

</script>
</svg>
++++


A Server Example
----------------
++++
<svg id="server_example_9" style="width:1000px; height:560px;" viewBox="0 0 1000 560" preserveAspectRatio="xMinYMin meet">
<script>

var s11 = Snap("#server_example_9");

s11.text(10,100,"%% The Internal Functions").addClass("code");
s11.text(10,140,"%% Help functions used to allocate and deallocate.").addClass("code");
s11.text(10,180,"%%frequencies.").addClass("code");
s11.text(10,220,"").addClass("code");
s11.text(10,260,"allocate({[], Allocated}, Pid) ->").addClass("code");
s11.text(10,300,"    {{[], Allocated}, {error, no_frequencies}};").addClass("code");
s11.text(10,340,"allocate({[Freq|Free], Allocated}, Pid) ->").addClass("code");
s11.text(10,380,"    {{Free, [{Freq, Pid}|Allocated]}, {ok, Freq}}.").addClass("code");
s11.text(10,420,"").addClass("code");
s11.text(10,460,"deallocate({Free, Allocated}, Freq) ->").addClass("code");
s11.text(10,500,"    NewAllocated = lists:keydelete(Freq, 1, Allocated),").addClass("code");
s11.text(10,540,"    {[Freq|Free],  NewAllocated}.").addClass("code");

s11_g1_1 = s11.text(10,260,"allocate({[], Allocated}, Pid) ->").addClass("code darkred bold");
s11_g1_2 = s11.text(10,300,"    {{[], Allocated}, {error, no_frequencies}};").addClass("code darkred bold");
s11_g1_3 = s11.text(10,340,"allocate({[Freq|Free], Allocated}, Pid) ->").addClass("code darkred bold");
s11_g1_4 = s11.text(10,380,"    {{Free, [{Freq, Pid}|Allocated]}, {ok, Freq}}.").addClass("code darkred bold");
s11_g1_5 = s11.text(10,420,"").addClass("code darkred bold");
s11_g1_6 = s11.text(10,460,"deallocate({Free, Allocated}, Freq) ->").addClass("code darkred bold");
s11_g1_7 = s11.text(10,500,"    NewAllocated = lists:keydelete(Freq, 1, Allocated),").addClass("code darkred bold");
s11_g1_8 = s11.text(10,540,"    {[Freq|Free],  NewAllocated}.").addClass("code darkred bold");

s11.text(720,70,"Specific").addClass("bold darkred").attr({"font-size":"36pt"}).transform("rotate(-24,770,200)");

s11_g1 = s11.g(s11_g1_1, s11_g1_2, s11_g1_3, s11_g1_4, s11_g1_5, s11_g1_6, s11_g1_7, s11_g1_8).addClass("hide");

s11.click(function() { s11_g1.animate({"opacity":"1"}, 400, mina.linear); });

</script>
</svg>
++++

[NOTE.speaker]
[role="speaker"]
--
Note: for the internal functions, they're all specific; that's the meat of the implementation module.
--


Behaviours
----------
image::images/behaviours_2.png[Behaviours, auto, auto]
{empty}  +  

* Place all the generic code in the *server* module
* Place all the specific code in the *frequency* module


A Server Example
----------------
++++
<div class="left"><p class="green" style="text-align:center; font-weight:bold;">Generic</p>
<div class="pre">-module(server).
-export([start/2, stop/1, 
        call/2, init/2]).

start(Mod, Args) ->
   Pid = spawn(server,init, 
               [Mod,Args]),
   register(Mod, Pid).

stop(Mod) -> Mod ! stop.

init(Mod, Args) ->
   State = Mod:init(Args),
   loop(Mod, State).
</div></div>
++++

++++
<div class="left"><p style="text-align:center;"><strong>Specific</strong></p>
<div class="pre">-module(frequency).
-export([start/0,stop/0,   init/1,handle/2,   allocate/0,deallocate/1]).

start() ->
 server:start(frequency,[]).
stop() ->
   server:stop(frequency).

init(_Args) ->
   {get_frequencies(), []}.
get_frequencies() ->
   [10,11,12,13,14,15].
</div></div>
++++

[NOTE.speaker]
[role="speaker"]
--
go through it all again. Point out what is generic and what is specific. Specify that Generic is in control and only refers to specific when it doesn't know what to do anymore (implementation details).

Point the difference between starting and running. 'start' might just be a call done by someone else. Also show that generic's start now requires a callback module.
--


A Server Example
----------------
++++
<div class="pre">call(Pid, Message) ->
    Pid ! {request, self(), Message},
    receive 
        {reply, Reply} -> Reply
    end.

reply(Pid, Message) ->
    Pid ! {reply, Message}.
</div>
<span class="green bold rotate" style="float: right; top:-130pt; right: 120pt; font-size: 1.5em; transform: rotate(-30deg); -webkit-transform: rotate(-30deg);">Generic</span>
++++

++++
<div class="pre">allocate()-> 
    server:call(frequency, {allocate, self()}).

deallocate(Freq) ->
    server:call(frequency, {deallocate, Freq}).
 
 
</div>
<span class="darkred bold rotate" style="float: right; top:-120pt; right: 120pt; font-size: 1.5em; transform: rotate(-30deg); -webkit-transform: rotate(-30deg);">Specific</span>
++++


A Server Example
----------------
++++
<div class="pre">loop(Mod, State) ->
    receive
        {request, Pid, Msg} ->
          {NewState, Reply} = Mod:handle(Msg, State),
          reply(Pid, Reply),
          loop(Mod, NewState);
       stop -> ok
    end.
</div>
<span class="green bold rotate" style="float: right; top:-130pt; right: 120pt; font-size: 1.5em; transform: rotate(-30deg); -webkit-transform: rotate(-30deg);">Generic</span>
++++

++++
<div class="pre">handle({allocate, Pid}, Frequencies) ->
    {NewFrequencies, Reply} = allocate(Frequencies, Pid),
    {NewFrequencies, Reply};
handle({deallocate, Freq}, Frequencies) ->
    Reply = ok,
    {deallocate(Frequencies, Freq), Reply}.
 
</div>
<span class="darkred bold rotate" style="float: right; top:-120pt; right: 120pt; font-size: 1.5em; transform: rotate(-30deg); -webkit-transform: rotate(-30deg);">Specific</span>
++++


Behaviours
----------
* Design Patterns
* Behaviours
* A Server Example
