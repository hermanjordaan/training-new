Crash Dumps
===========
:revealjs_theme: esl
:revealjs_slideNumber: true
:revealjs_history: true
:revealjs_transition: linear
:revealjs_center: false
Erlang Solutions Ltd.
© 1999–2015 Erlang Solutions Ltd.

++++
<link rel="stylesheet" type="text/css" href="../../styles/svg.css"></link>
<script type="text/javascript" src="../../tools/snap.svg/snap.svg-min.js"></script>
++++


Erlang Crash Dumps
------------------
* Crash Dumps
* Example
* Crash Slogans
* Process Information
* Other Information


Crash Dumps
-----------
* The Erlang Virtual Machine (ERTS) crashes.
* Event reports give no clues as to what caused the crash.
* A watchdog monitors the system through heartbeats.
** The system has been automatically restarted.
** Internal states are erased or changed.
* The crash can not be regenerated.
* *What do we do?*


Crash Dumps
-----------
* *Solution*: use Erlang Crash Dumps
* When the ERTS exits abnormally, a crash dump is created.
* Crashes are due to errors the ERTS can not recover from:
** System limitations, bug in the ERTS or in the Erlang code, an Erlang process calling *erlang:halt(Status).*
* Understanding the crash dump allows us to
** Reconfigure the system to avoid the limitations.
** Efficiently detect software errors and fix them.


Crash Dumps
-----------
* Crash dumps will contain
** The time and reason for the crash 
** ERTS version number and compile date
** Information on all processes
** Internal table information
** ETS table information
** Timer information
** Loaded module information
** List of all atoms
* Crash dump formats can vary greatly  between releases.


Example
-------
....
-module(atom_leak).
-export([start/0]).

start() ->
    loop(0).

loop(N) ->
    _ = list_to_atom(integer_to_list(N)),
    loop(N+1).
 
....

* The code will dynamically generate atoms until no more space is left in the VM's atom table.


Example
-------
++++
<div class="pre"><b>$ erl +t 12000</b><span class="comment" style="color:#797979;">
Erlang R14B03 (erts-5.8.4) [source] [64-bit] [smp:4:4] [rq:4] [async-threads:0] [hipe] [kernel-poll:false]

Eshell V5.8.4  (abort with ^G)</span>
<b>1> atom_leak:start().</b>

Crash dump was written to: erl_crash.dump
no more index entries in atom_tab (max=12000)
Abort trap




</div>
++++


Crash Slogans
-------------
* The reason for the emulator crash is called the Slogan.
** It is a description generated by the kernel.
** The string passed to the halt/1 BIF.
* The Slogan varies depending on
** The operating system
** ERTS/OTP releases
** Underlying applications
* The documented Slogans are are only suggestions.


Crash Slogans
-------------
*Can't reallocate X bytes of memory*

*Can't allocate X bytes of memory*

*Can't allocate X*::
* The system has run out of memory
* The amount of memory needed might give hints
** Large memory amounts might mean bugs in the Erlang code
** Small amounts might mean fragmentation or ERTS bugs
* Process and ETS table sizes also give hints on the source of the problem


Crash Slogans
-------------
*Got unstable memory block address, size X*::
* The ERTS has reached its virtual memory space limit
** Something, possibly an Erlang process, consumes lots of memory

*Unexpected op code X*::
* There is an error in the compiled code
** The beam file is corrupt
** There is a bug in the compiler
** The file was compiled for a different ERTS version


Crash Slogans
-------------
*Driver select with too large file descriptor*::
* The ERTS tried to open too many sockets/pipes
** Not possible due to limitations in unix select calls
* The file descriptor limits can be changed
** Not the number of simultaneously open connections
* Open files are not affected

*No function Module:Function/2 or Module:start/1*::
* The system is not starting correctly
** The kernel/stdlib files are damaged
** There are files missing or not in the code search path


Crash Slogans
-------------
*Init terminating in do_boot()*::
* OTP Specific, there are errors in the boot script of a release
** The boot file can not be read or is the wrong one
** Bad configuration parameters
** Wrong ERTS/OTP version


Crash Slogans
-------------
*Could not start kernel pid (Who)*::
* One of the kernel processes could not start
** Faulty configuration data or damaged configuration file
** Configuration files in the wrong location 

*Kernel pid terminated*::
* Most often, the application controller has shut down
* The top supervisor has terminated abnormally
* The distributed node name is already being used.


Process Information
-------------------
* Information on all processes is in the dump
** Process identifier and registered name
** Process state
** scheduled, waiting, running, exiting, suspended
** The spawned function, module and arity
** Size of the fragmented heap
** Linked process list/ports and Process dictionary
** Reductions, Stack + Heap size, Old Heap
** Stack dump
** Including variable values
** Other information useful to the ERTS designers

[NOTE.speaker]
[role="speaker"]
--
In some versions, the fragmented heap is incorrectly called the message buffer
--


Process Information: *R14B03 version*
-------------------------------------
....
=proc:<0.31.0>
State: Running
Spawned as: erlang:apply/2
Last scheduled in for: atom_leak:loop/1
Spawned by: <0.25.0>
Started: Wed Sep  7 08:35:36 2011
...
Link list: [<0.25.0>]
Reductions: 17619
Stack+heap: 987
OldHeap: 987
Heap unused: 355
OldHeap unused: 355
Program counter: 0x0000000011e46370 (atom_leak:loop/1 + 8)
....

[NOTE.speaker]
[role="speaker"]
--
Explain that past the \'Program Counter' field, you have the stack data (with more available when analysing non-tail-recursive calls) and that before that, you have the heap data available
--


Other Information
-----------------
* Internal Table Information
** Useful to ERTS developers
** Info on the module / atom tables / allocated binaries
* ETS Table Information
** Table name, number and owner
** Number of elements and table size
* Timers
* Loaded Module Information
* All atoms

[NOTE.speaker]
[role="speaker"]
--
Explain that you can find the info by looking for lines beginning in '=' in the dump
--


Other Information
-----------------
* Erlang crash dumps can be huge.
* The crash dump file is stored:
** In the directory the emulator is running.
** Where the environment variable *ERL_CRASH_DUMP* points to.
** Assumes a writeable file system.
* If used correctly, useful to quickly locate errors.
** Even after the system restarted.
** The Slogan is usually enough to understand the problem.

[NOTE.speaker]
[role="speaker"]
--
If relevant to the group, add that crash dumps can be a useful resource to locate bugs in the ERTS, or disprove that there are none when you have no memory protection
--


Erlang Crash Dumps
------------------
* Crash Dumps
* Example
* Crash Slogans
* Process Information
* Other Information
